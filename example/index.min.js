(function(dependencies, global) {
    var cache = [];

    function require(index) {
        var module = cache[index],
            callback, exports;

        if (module !== undefined) {
            return module.exports;
        } else {
            callback = dependencies[index];
            exports = {};

            cache[index] = module = {
                exports: exports,
                require: require
            };

            callback.call(exports, require, exports, module, global);
            return module.exports;
        }
    }

    require.resolve = function(path) {
        return path;
    };

    if (typeof(define) === "function" && define.amd) {
        define([], function() {
            return require(0);
        });
    } else if (typeof(module) !== "undefined" && module.exports) {
        module.exports = require(0);
    } else {

        require(0);

    }
}([
    function(require, exports, module, global) {

        var mat4 = require(1),
            requestAnimationFrame = require(9),
            WebGLContext = require(14);


        var canvas = document.getElementById("canvas"),
            context = new WebGLContext(),
            gl;

        function loadImage(src, callback) {
            var image = new Image(),
                texture = {
                    __id: src,
                    data: image,
                    on: function() {}
                };

            image.onload = function() {
                texture.width = image.width;
                texture.height = image.height;
                callback();
            };

            image.src = src;

            return texture;
        }

        var count = 2;

        function check() {
            if (--count === 0) {
                render();
            }
        }
        var textureA = loadImage("a.jpg", check);
        var textureB = loadImage("b.jpg", check);

        global.context = context;
        context.setCanvas(canvas);
        gl = context.gl;
        context.setViewport(0, 0, canvas.width, canvas.height);

        var programA = context.createProgram();
        programA.compile(
            [
                "uniform mat4 projection;",
                "uniform mat4 modelView;",

                "attribute vec3 position;",
                "attribute vec2 uv;",

                "varying vec2 vUv;",

                "void main(void) {",
                "    vUv = uv;",
                "    gl_Position = projection * modelView * vec4(position, 1.0);",
                "}"
            ].join("\n"), [
                "uniform sampler2D texture;",

                "varying vec2 vUv;",

                "void main(void) {",
                "    gl_FragColor = texture2D(texture, vec2(vUv.s, vUv.t));",
                "}"
            ].join("\n")
        );

        var programB = context.createProgram();
        programB.compile(
            [
                "uniform mat4 projection;",
                "uniform mat4 modelView;",

                "attribute vec3 position;",
                "attribute vec2 uv;",

                "varying vec2 vUv;",

                "void main(void) {",
                "    vUv = uv;",
                "    gl_Position = projection * modelView * vec4(position, 1.0);",
                "}"
            ].join("\n"), [
                "uniform sampler2D texture;",
                "uniform sampler2D texture1;",

                "varying vec2 vUv;",

                "void main(void) {",
                "    gl_FragColor = texture2D(texture, vec2(vUv.s, vUv.t)) * texture2D(texture1, vec2(vUv.s, vUv.t));",
                "}"
            ].join("\n")
        );

        var buffer = context.createBuffer();
        buffer.compile(gl.ARRAY_BUFFER, new Float32Array([
            1, 1, 0, 0, 0, -1, 1, 0, 1, 0,
            1, -1, 0, 0, 1, -1, -1, 0, 1, 1
        ]), 20, gl.STATIC_DRAW);

        var triangleBuffer = context.createBuffer();
        triangleBuffer.compile(gl.ARRAY_BUFFER, new Float32Array([
            0, 1, 0, 0.5, 1.5, -1, -1, 0, -0.5, 0,
            1, -1, 0, 1.5, 0
        ]), 20, gl.STATIC_DRAW);

        var perspectiveMatrix = mat4.perspective(mat4.create(), 45, canvas.width / canvas.height, 0.1, 1024),
            modelView = mat4.create(),
            camera = [0, 0, -5];

        function renderBox(ms) {
            camera[0] = Math.sin(ms * 0.001) * 2;
            camera[1] = 0;

            context.setProgram(programA);

            mat4.setPosition(modelView, camera);

            programA.attributes.get("position").set(buffer, 0);
            programA.attributes.get("uv").set(buffer, 12);

            programA.uniforms.get("projection").set(perspectiveMatrix);
            programA.uniforms.get("modelView").set(modelView);
            programA.uniforms.get("texture").set(textureA);

            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        }

        function renderTriangle(ms) {
            camera[0] = 0;
            camera[1] = Math.sin(ms * 0.001) * 2;

            context.setProgram(programB);

            mat4.setPosition(modelView, camera);

            programB.attributes.get("position").set(triangleBuffer, 0);
            programB.attributes.get("uv").set(triangleBuffer, 12);

            programB.uniforms.get("projection").set(perspectiveMatrix);
            programB.uniforms.get("modelView").set(modelView);
            programB.uniforms.get("texture").set(textureB);
            programB.uniforms.get("texture1").set(textureA);

            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 3);
        }

        var color = [0, 0, 0];

        function render(ms) {

            color[0] = Math.sin(ms * 0.00001);
            color[1] = Math.cos(ms * 0.0001);
            color[2] = Math.sin(ms * 0.001);

            context.setClearColor(color);
            context.clearCanvas();

            renderBox(ms);
            renderTriangle(ms);

            requestAnimationFrame(render, canvas);
        }


    },
    function(require, exports, module, global) {

        var mathf = require(2),
            vec3 = require(8);


        var mat4 = exports;


        mat4.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : mathf.ArrayType;


        mat4.create = function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
            var out = new mat4.ArrayType(16);

            out[0] = m11 !== undefined ? m11 : 1;
            out[4] = m12 !== undefined ? m12 : 0;
            out[8] = m13 !== undefined ? m13 : 0;
            out[12] = m14 !== undefined ? m14 : 0;
            out[1] = m21 !== undefined ? m21 : 0;
            out[5] = m22 !== undefined ? m22 : 1;
            out[9] = m23 !== undefined ? m23 : 0;
            out[13] = m24 !== undefined ? m24 : 0;
            out[2] = m31 !== undefined ? m31 : 0;
            out[6] = m32 !== undefined ? m32 : 0;
            out[10] = m33 !== undefined ? m33 : 1;
            out[14] = m34 !== undefined ? m34 : 0;
            out[3] = m41 !== undefined ? m41 : 0;
            out[7] = m42 !== undefined ? m42 : 0;
            out[11] = m43 !== undefined ? m43 : 0;
            out[15] = m44 !== undefined ? m44 : 1;

            return out;
        };

        mat4.copy = function(out, a) {

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];

            return out;
        };

        mat4.clone = function(a) {
            var out = new mat4.ArrayType(16);

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];

            return out;
        };

        mat4.set = function(out, m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {

            out[0] = m11 !== undefined ? m11 : 1;
            out[4] = m12 !== undefined ? m12 : 0;
            out[8] = m13 !== undefined ? m13 : 0;
            out[12] = m14 !== undefined ? m14 : 0;
            out[1] = m21 !== undefined ? m21 : 0;
            out[5] = m22 !== undefined ? m22 : 1;
            out[9] = m23 !== undefined ? m23 : 0;
            out[13] = m24 !== undefined ? m24 : 0;
            out[2] = m31 !== undefined ? m31 : 0;
            out[6] = m32 !== undefined ? m32 : 0;
            out[10] = m33 !== undefined ? m33 : 1;
            out[14] = m34 !== undefined ? m34 : 0;
            out[3] = m41 !== undefined ? m41 : 0;
            out[7] = m42 !== undefined ? m42 : 0;
            out[11] = m43 !== undefined ? m43 : 0;
            out[15] = m44 !== undefined ? m44 : 1;

            return out;
        };

        mat4.identity = function(out) {

            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;

            return out;
        };

        mat4.zero = function(out) {

            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 0;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 0;

            return out;
        };

        mat4.mul = function(out, a, b) {
            var a11 = a[0],
                a12 = a[4],
                a13 = a[8],
                a14 = a[12],
                a21 = a[1],
                a22 = a[5],
                a23 = a[9],
                a24 = a[13],
                a31 = a[2],
                a32 = a[6],
                a33 = a[10],
                a34 = a[14],
                a41 = a[3],
                a42 = a[7],
                a43 = a[11],
                a44 = a[15],

                b11 = b[0],
                b12 = b[4],
                b13 = b[8],
                b14 = b[12],
                b21 = b[1],
                b22 = b[5],
                b23 = b[9],
                b24 = b[13],
                b31 = b[2],
                b32 = b[6],
                b33 = b[10],
                b34 = b[14],
                b41 = b[3],
                b42 = b[7],
                b43 = b[11],
                b44 = b[15];

            out[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
            out[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
            out[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
            out[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

            out[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
            out[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
            out[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
            out[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

            out[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
            out[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
            out[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
            out[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

            out[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
            out[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
            out[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
            out[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

            return out;
        };

        mat4.smul = function(out, a, s) {

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;
            out[3] = a[3] * s;
            out[4] = a[4] * s;
            out[5] = a[5] * s;
            out[6] = a[6] * s;
            out[7] = a[7] * s;
            out[8] = a[8] * s;
            out[9] = a[9] * s;
            out[10] = a[10] * s;
            out[11] = a[11] * s;
            out[12] = a[12] * s;
            out[13] = a[13] * s;
            out[14] = a[14] * s;
            out[15] = a[15] * s;

            return out;
        };

        mat4.sdiv = function(out, a, s) {
            s = s !== 0 ? 1 / s : s;

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;
            out[3] = a[3] * s;
            out[4] = a[4] * s;
            out[5] = a[5] * s;
            out[6] = a[6] * s;
            out[7] = a[7] * s;
            out[8] = a[8] * s;
            out[9] = a[9] * s;
            out[10] = a[10] * s;
            out[11] = a[11] * s;
            out[12] = a[12] * s;
            out[13] = a[13] * s;
            out[14] = a[14] * s;
            out[15] = a[15] * s;

            return out;
        };

        mat4.determinant = function(out) {
            var m11 = out[0],
                m12 = out[4],
                m13 = out[8],
                m14 = out[12],
                m21 = out[1],
                m22 = out[5],
                m23 = out[9],
                m24 = out[13],
                m31 = out[2],
                m32 = out[6],
                m33 = out[10],
                m34 = out[14],
                m41 = out[3],
                m42 = out[7],
                m43 = out[11],
                m44 = out[15];

            return (
                m41 * (m14 * m23 * m32 - m13 * m24 * m32 - m14 * m22 * m33 + m12 * m24 * m33 + m13 * m22 * m34 - m12 * m23 * m34) +
                m42 * (m11 * m23 * m34 - m11 * m24 * m33 + m14 * m21 * m33 - m13 * m21 * m34 + m13 * m24 * m31 - m14 * m23 * m31) +
                m43 * (m11 * m24 * m32 - m11 * m22 * m34 - m14 * m21 * m32 + m12 * m21 * m34 + m14 * m22 * m31 - m12 * m24 * m31) +
                m44 * (-m13 * m22 * m31 - m11 * m23 * m32 + m11 * m22 * m33 + m13 * m21 * m32 - m12 * m21 * m33 + m12 * m23 * m31)
            );
        };

        mat4.inverse = function(out, a) {
            var m11 = a[0],
                m12 = a[4],
                m13 = a[8],
                m14 = a[12],
                m21 = a[1],
                m22 = a[5],
                m23 = a[9],
                m24 = a[13],
                m31 = a[2],
                m32 = a[6],
                m33 = a[10],
                m34 = a[14],
                m41 = a[3],
                m42 = a[7],
                m43 = a[11],
                m44 = a[15],

                me0 = m23 * m34 * m42 - m24 * m33 * m42 + m24 * m32 * m43 - m22 * m34 * m43 - m23 * m32 * m44 + m22 * m33 * m44,
                me4 = m14 * m33 * m42 - m13 * m34 * m42 - m14 * m32 * m43 + m12 * m34 * m43 + m13 * m32 * m44 - m12 * m33 * m44,
                me8 = m13 * m24 * m42 - m14 * m23 * m42 + m14 * m22 * m43 - m12 * m24 * m43 - m13 * m22 * m44 + m12 * m23 * m44,
                me12 = m14 * m23 * m32 - m13 * m24 * m32 - m14 * m22 * m33 + m12 * m24 * m33 + m13 * m22 * m34 - m12 * m23 * m34,

                det = m11 * me0 + m21 * me4 + m31 * me8 + m41 * me12;

            if (det === 0) {
                return mat4.identity(out);
            }
            det = 1 / det;

            out[0] = me0 * det;
            out[4] = me4 * det;
            out[8] = me8 * det;
            out[12] = me12 * det;
            out[1] = (m24 * m33 * m41 - m23 * m34 * m41 - m24 * m31 * m43 + m21 * m34 * m43 + m23 * m31 * m44 - m21 * m33 * m44) * det;
            out[5] = (m13 * m34 * m41 - m14 * m33 * m41 + m14 * m31 * m43 - m11 * m34 * m43 - m13 * m31 * m44 + m11 * m33 * m44) * det;
            out[9] = (m14 * m23 * m41 - m13 * m24 * m41 - m14 * m21 * m43 + m11 * m24 * m43 + m13 * m21 * m44 - m11 * m23 * m44) * det;
            out[13] = (m13 * m24 * m31 - m14 * m23 * m31 + m14 * m21 * m33 - m11 * m24 * m33 - m13 * m21 * m34 + m11 * m23 * m34) * det;
            out[2] = (m22 * m34 * m41 - m24 * m32 * m41 + m24 * m31 * m42 - m21 * m34 * m42 - m22 * m31 * m44 + m21 * m32 * m44) * det;
            out[6] = (m14 * m32 * m41 - m12 * m34 * m41 - m14 * m31 * m42 + m11 * m34 * m42 + m12 * m31 * m44 - m11 * m32 * m44) * det;
            out[10] = (m12 * m24 * m41 - m14 * m22 * m41 + m14 * m21 * m42 - m11 * m24 * m42 - m12 * m21 * m44 + m11 * m22 * m44) * det;
            out[14] = (m14 * m22 * m31 - m12 * m24 * m31 - m14 * m21 * m32 + m11 * m24 * m32 + m12 * m21 * m34 - m11 * m22 * m34) * det;
            out[3] = (m23 * m32 * m41 - m22 * m33 * m41 - m23 * m31 * m42 + m21 * m33 * m42 + m22 * m31 * m43 - m21 * m32 * m43) * det;
            out[7] = (m12 * m33 * m41 - m13 * m32 * m41 + m13 * m31 * m42 - m11 * m33 * m42 - m12 * m31 * m43 + m11 * m32 * m43) * det;
            out[11] = (m13 * m22 * m41 - m12 * m23 * m41 - m13 * m21 * m42 + m11 * m23 * m42 + m12 * m21 * m43 - m11 * m22 * m43) * det;
            out[15] = (m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) * det;

            return out;
        };

        mat4.transpose = function(out, a) {
            var a01, a02, a03, a12, a13, a23;

            if (out === a) {
                a01 = a[1];
                a02 = a[2];
                a03 = a[3];
                a12 = a[6];
                a13 = a[7];
                a23 = a[11];

                out[1] = a[4];
                out[2] = a[8];
                out[3] = a[12];
                out[4] = a01;
                out[6] = a[9];
                out[7] = a[13];
                out[8] = a02;
                out[9] = a12;
                out[11] = a[14];
                out[12] = a03;
                out[13] = a13;
                out[14] = a23;
            } else {
                out[0] = a[0];
                out[1] = a[4];
                out[2] = a[8];
                out[3] = a[12];
                out[4] = a[1];
                out[5] = a[5];
                out[6] = a[9];
                out[7] = a[13];
                out[8] = a[2];
                out[9] = a[6];
                out[10] = a[10];
                out[11] = a[14];
                out[12] = a[3];
                out[13] = a[7];
                out[14] = a[11];
                out[15] = a[15];
            }

            return out;
        };

        var lookAt_x = vec3.create(),
            lookAt_y = vec3.create(),
            lookAt_z = vec3.create();

        mat4.lookAt = function(out, eye, target, up) {
            var x = lookAt_x,
                y = lookAt_y,
                z = lookAt_z;

            vec3.sub(z, eye, target);
            vec3.normalize(z, z);

            if (vec3.length(z) === 0) {
                z[2] = 1;
            }

            vec3.cross(x, up, z);
            vec3.normalize(x, x);

            if (vec3.length(x) === 0) {
                z[0] += mathf.EPSILON;
                vec3.cross(x, up, z);
                vec3.normalize(x, x);
            }

            vec3.cross(y, z, x);

            out[0] = x[0];
            out[4] = y[0];
            out[8] = z[0];
            out[1] = x[1];
            out[5] = y[1];
            out[9] = z[1];
            out[2] = x[2];
            out[6] = y[2];
            out[10] = z[2];

            return out;
        };

        mat4.compose = function(out, position, scale, rotation) {
            var x = rotation[0],
                y = rotation[1],
                z = rotation[2],
                w = rotation[3],
                x2 = x + x,
                y2 = y + y,
                z2 = z + z,
                xx = x * x2,
                xy = x * y2,
                xz = x * z2,
                yy = y * y2,
                yz = y * z2,
                zz = z * z2,
                wx = w * x2,
                wy = w * y2,
                wz = w * z2,

                sx = scale[0],
                sy = scale[1],
                sz = scale[2];

            out[0] = (1 - (yy + zz)) * sx;
            out[4] = (xy - wz) * sy;
            out[8] = (xz + wy) * sz;

            out[1] = (xy + wz) * sx;
            out[5] = (1 - (xx + zz)) * sy;
            out[9] = (yz - wx) * sz;

            out[2] = (xz - wy) * sx;
            out[6] = (yz + wx) * sy;
            out[10] = (1 - (xx + yy)) * sz;

            out[3] = 0;
            out[7] = 0;
            out[11] = 0;

            out[12] = position[0];
            out[13] = position[1];
            out[14] = position[2];
            out[15] = 1;

            return out;
        };

        mat4.decompose = function(out, position, scale, rotation) {
            var m11 = out[0],
                m12 = out[4],
                m13 = out[8],
                m21 = out[1],
                m22 = out[5],
                m23 = out[9],
                m31 = out[2],
                m32 = out[6],
                m33 = out[10],
                x = 0,
                y = 0,
                z = 0,
                w = 1,

                sx = vec3.lengthValues(m11, m21, m31),
                sy = vec3.lengthValues(m12, m22, m32),
                sz = vec3.lengthValues(m13, m23, m33),

                invSx = 1 / sx,
                invSy = 1 / sy,
                invSz = 1 / sz,

                s, trace;

            scale[0] = sx;
            scale[1] = sy;
            scale[2] = sz;

            position[0] = out[12];
            position[1] = out[13];
            position[2] = out[14];

            m11 *= invSx;
            m12 *= invSy;
            m13 *= invSz;
            m21 *= invSx;
            m22 *= invSy;
            m23 *= invSz;
            m31 *= invSx;
            m32 *= invSy;
            m33 *= invSz;

            trace = m11 + m22 + m33;

            if (trace > 0) {
                s = 0.5 / mathf.sqrt(trace + 1);

                w = 0.25 / s;
                x = (m32 - m23) * s;
                y = (m13 - m31) * s;
                z = (m21 - m12) * s;
            } else if (m11 > m22 && m11 > m33) {
                s = 2 * mathf.sqrt(1 + m11 - m22 - m33);

                w = (m32 - m23) / s;
                x = 0.25 * s;
                y = (m12 + m21) / s;
                z = (m13 + m31) / s;
            } else if (m22 > m33) {
                s = 2 * mathf.sqrt(1 + m22 - m11 - m33);

                w = (m13 - m31) / s;
                x = (m12 + m21) / s;
                y = 0.25 * s;
                z = (m23 + m32) / s;
            } else {
                s = 2 * mathf.sqrt(1 + m33 - m11 - m22);

                w = (m21 - m12) / s;
                x = (m13 + m31) / s;
                y = (m23 + m32) / s;
                z = 0.25 * s;
            }

            rotation[0] = x;
            rotation[1] = y;
            rotation[2] = w;
            rotation[3] = z;

            return out;
        };

        mat4.setPosition = function(out, v) {
            var z = v[2];

            out[12] = v[0];
            out[13] = v[1];
            out[14] = z !== undefined ? z : 0;

            return out;
        };

        mat4.extractPosition = function(out, a) {

            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];

            return out;
        };

        mat4.extractRotation = function(out, a) {
            var lx = vec3.lengthSqValues(a[0], a[1], a[2]),
                ly = vec3.lengthSqValues(a[4], a[5], a[6]),
                lz = vec3.lengthSqValues(a[8], a[9], a[10]),

                scaleX = lx !== 0 ? 1 / mathf.sqrt(lx) : lx,
                scaleY = ly !== 0 ? 1 / mathf.sqrt(ly) : ly,
                scaleZ = lz !== 0 ? 1 / mathf.sqrt(lz) : lz;

            out[0] = me[0] * scaleX;
            out[1] = me[1] * scaleX;
            out[2] = me[2] * scaleX;

            out[4] = me[4] * scaleY;
            out[5] = me[5] * scaleY;
            out[6] = me[6] * scaleY;

            out[8] = me[8] * scaleZ;
            out[9] = me[9] * scaleZ;
            out[10] = me[10] * scaleZ;

            return out;
        };

        mat4.extractRotationScale = function(out, a) {

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];

            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];

            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];

            return out;
        };

        mat4.translate = function(out, a, v) {
            var x = v[0],
                y = v[1],
                z = v[2],
                a00, a01, a02, a03,
                a10, a11, a12, a13,
                a20, a21, a22, a23;

            if (a === out) {
                out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
            } else {
                a00 = a[0];
                a01 = a[1];
                a02 = a[2];
                a03 = a[3];
                a10 = a[4];
                a11 = a[5];
                a12 = a[6];
                a13 = a[7];
                a20 = a[8];
                a21 = a[9];
                a22 = a[10];
                a23 = a[11];

                out[0] = a00;
                out[1] = a01;
                out[2] = a02;
                out[3] = a03;
                out[4] = a10;
                out[5] = a11;
                out[6] = a12;
                out[7] = a13;
                out[8] = a20;
                out[9] = a21;
                out[10] = a22;
                out[11] = a23;

                out[12] = a00 * x + a10 * y + a20 * z + a[12];
                out[13] = a01 * x + a11 * y + a21 * z + a[13];
                out[14] = a02 * x + a12 * y + a22 * z + a[14];
                out[15] = a03 * x + a13 * y + a23 * z + a[15];
            }

            return out;
        };

        mat4.scale = function(out, a, v) {
            var x = v[0],
                y = v[1],
                z = v[2];

            out[0] = a[0] * x;
            out[1] = a[1] * x;
            out[2] = a[2] * x;
            out[3] = a[3] * x;
            out[4] = a[4] * y;
            out[5] = a[5] * y;
            out[6] = a[6] * y;
            out[7] = a[7] * y;
            out[8] = a[8] * z;
            out[9] = a[9] * z;
            out[10] = a[10] * z;
            out[11] = a[11] * z;
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];

            return out;
        };

        mat4.rotateX = function(out, a, angle) {
            var m12 = a[4],
                m22 = a[5],
                m32 = a[6],
                m42 = a[7],
                m13 = a[8],
                m23 = a[9],
                m33 = a[10],
                m43 = a[11],
                c = mathf.cos(angle),
                s = mathf.sin(angle);

            if (a !== out) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
            }

            out[4] = c * m12 + s * m13;
            out[5] = c * m22 + s * m23;
            out[6] = c * m32 + s * m33;
            out[7] = c * m42 + s * m43;

            out[8] = c * m13 - s * m12;
            out[9] = c * m23 - s * m22;
            out[10] = c * m33 - s * m32;
            out[11] = c * m43 - s * m42;

            return this;
        };

        mat4.rotateY = function(out, a, angle) {
            var m11 = a[0],
                m21 = a[1],
                m31 = a[2],
                m41 = a[3],
                m13 = a[8],
                m23 = a[9],
                m33 = a[10],
                m43 = a[11],
                c = mathf.cos(angle),
                s = mathf.sin(angle);

            if (a !== out) {
                out[4] = a[4];
                out[5] = a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
            }

            out[0] = c * m11 - s * m13;
            out[1] = c * m21 - s * m23;
            out[2] = c * m31 - s * m33;
            out[3] = c * m41 - s * m43;

            out[8] = c * m13 + s * m11;
            out[9] = c * m23 + s * m21;
            out[10] = c * m33 + s * m31;
            out[11] = c * m43 + s * m41;

            return this;
        };

        mat4.rotateZ = function(out, a, angle) {
            var m11 = a[0],
                m21 = a[1],
                m31 = a[2],
                m41 = a[3],
                m12 = a[4],
                m22 = a[5],
                m32 = a[6],
                m42 = a[7],
                c = mathf.cos(angle),
                s = mathf.sin(angle);

            if (a !== out) {
                out[8] = a[8];
                out[9] = a[9];
                out[10] = a[10];
                out[11] = a[11];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
            }

            out[0] = c * m11 + s * m12;
            out[1] = c * m21 + s * m22;
            out[2] = c * m31 + s * m32;
            out[3] = c * m41 + s * m42;

            out[4] = c * m12 - s * m11;
            out[5] = c * m22 - s * m21;
            out[6] = c * m32 - s * m31;
            out[7] = c * m42 - s * m41;

            return out;
        };

        mat4.makeTranslation = function(out, v) {

            return mat4.set(
                out,
                1, 0, 0, v[0],
                0, 1, 0, v[1],
                0, 0, 1, v[2],
                0, 0, 0, 1
            );
        };

        mat4.makeScale = function(out, v) {

            return mat4.set(
                out,
                v[0], 0, 0, 0,
                0, v[1], 0, 0,
                0, 0, v[2], 0,
                0, 0, 0, 1
            );
        };

        mat4.makeRotationX = function(out, angle) {
            var c = mathf.cos(angle),
                s = mathf.sin(angle);

            return mat4.set(
                out,
                1, 0, 0, 0,
                0, c, -s, 0,
                0, s, c, 0,
                0, 0, 0, 1
            );
        };

        mat4.makeRotationY = function(out, angle) {
            var c = mathf.cos(angle),
                s = mathf.sin(angle);

            return mat4.set(
                out,
                c, 0, s, 0,
                0, 1, 0, 0, -s, 0, c, 0,
                0, 0, 0, 1
            );
        };

        mat4.makeRotationZ = function(out, angle) {
            var c = mathf.cos(angle),
                s = mathf.sin(angle);

            return mat4.set(
                out,
                c, -s, 0, 0,
                s, c, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            );
        };

        mat4.fromQuat = function(out, q) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3],
                x2 = x + x,
                y2 = y + y,
                z2 = z + z,
                xx = x * x2,
                xy = x * y2,
                xz = x * z2,
                yy = y * y2,
                yz = y * z2,
                zz = z * z2,
                wx = w * x2,
                wy = w * y2,
                wz = w * z2;

            out[0] = 1 - (yy + zz);
            out[4] = xy - wz;
            out[8] = xz + wy;

            out[1] = xy + wz;
            out[5] = 1 - (xx + zz);
            out[9] = yz - wx;

            out[2] = xz - wy;
            out[6] = yz + wx;
            out[10] = 1 - (xx + yy);

            out[3] = 0;
            out[7] = 0;
            out[11] = 0;

            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;

            return out;
        };

        mat4.frustum = function(out, left, right, top, bottom, near, far) {
            var x = 2 * near / (right - left),
                y = 2 * near / (top - bottom),

                a = (right + left) / (right - left),
                b = (top + bottom) / (top - bottom),
                c = -(far + near) / (far - near),
                d = -2 * far * near / (far - near);

            out[0] = x;
            out[4] = 0;
            out[8] = a;
            out[12] = 0;
            out[1] = 0;
            out[5] = y;
            out[9] = b;
            out[13] = 0;
            out[2] = 0;
            out[6] = 0;
            out[10] = c;
            out[14] = d;
            out[3] = 0;
            out[7] = 0;
            out[11] = -1;
            out[15] = 0;

            return out;
        };

        mat4.perspective = function(out, fov, aspect, near, far) {
            var ymax = near * mathf.tan(fov * 0.5),
                ymin = -ymax,
                xmin = ymin * aspect,
                xmax = ymax * aspect;

            return mat4.frustum(out, xmin, xmax, ymax, ymin, near, far);
        };

        mat4.orthographic = function(out, left, right, top, bottom, near, far) {
            var w = right - left,
                h = top - bottom,
                p = far - near,

                x = (right + left) / w,
                y = (top + bottom) / h,
                z = (far + near) / p;

            out[0] = 2 / w;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 2 / h;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = -2 / p;
            out[11] = 0;
            out[12] = -x;
            out[13] = -y;
            out[14] = -z;
            out[15] = 1;

            return out;
        };

        mat4.equal = function(a, b) {
            return !(
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2] ||
                a[3] !== b[3] ||
                a[4] !== b[4] ||
                a[5] !== b[5] ||
                a[6] !== b[6] ||
                a[7] !== b[7] ||
                a[8] !== b[8] ||
                a[9] !== b[9] ||
                a[10] !== b[10] ||
                a[11] !== b[11] ||
                a[12] !== b[12] ||
                a[13] !== b[13] ||
                a[14] !== b[14] ||
                a[15] !== b[15]
            );
        };

        mat4.notEqual = function(a, b) {
            return (
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2] ||
                a[3] !== b[3] ||
                a[4] !== b[4] ||
                a[5] !== b[5] ||
                a[6] !== b[6] ||
                a[7] !== b[7] ||
                a[8] !== b[8] ||
                a[9] !== b[9] ||
                a[10] !== b[10] ||
                a[11] !== b[11] ||
                a[12] !== b[12] ||
                a[13] !== b[13] ||
                a[14] !== b[14] ||
                a[15] !== b[15]
            );
        };

        mat4.str = function(out) {
            return (
                "Mat4[" + out[0] + ", " + out[4] + ", " + out[8] + ", " + out[12] + "]\n" +
                "     [" + out[1] + ", " + out[5] + ", " + out[9] + ", " + out[13] + "]\n" +
                "     [" + out[2] + ", " + out[6] + ", " + out[10] + ", " + out[14] + "]\n" +
                "     [" + out[3] + ", " + out[7] + ", " + out[11] + ", " + out[15] + "]"
            );
        };


    },
    function(require, exports, module, global) {

        var keys = require(3);


        var mathf = module.exports;


        mathf.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : Array;

        mathf.PI = Math.PI;
        mathf.TAU = mathf.PI * 2;
        mathf.TWO_PI = mathf.TAU;
        mathf.HALF_PI = mathf.PI * 0.5;
        mathf.FOURTH_PI = mathf.PI * 0.25;

        mathf.EPSILON = 0.000001;

        mathf.TO_RADS = mathf.PI / 180;
        mathf.TO_DEGS = 180 / mathf.PI;

        mathf.E = Math.E;
        mathf.LN2 = Math.LN2;
        mathf.LN10 = Math.LN10;
        mathf.LOG2E = Math.LOG2E;
        mathf.LOG10E = Math.LOG10E;
        mathf.SQRT1_2 = Math.SQRT1_2;
        mathf.SQRT2 = Math.SQRT2;

        mathf.abs = function abs(x) {
            return x < 0 ? -x : x;
        };

        mathf.acos = Math.acos;
        mathf.acosh = Math.acosh || (Math.acosh = function acosh(x) {
            return Math.log(x + Math.sqrt(x * x - 1));
        });
        mathf.asin = Math.asin;
        mathf.asinh = Math.asinh || (Math.asinh = function asinh(x) {
            if (x === -Infinity) {
                return x;
            } else {
                return Math.log(x + Math.sqrt(x * x + 1));
            }
        });
        mathf.atan = Math.atan;
        mathf.atan2 = Math.atan2;
        mathf.atanh = Math.atanh || (Math.atanh = function atanh(x) {
            return Math.log((1 + x) / (1 - x)) / 2;
        });

        mathf.cbrt = Math.cbrt || (Math.cbrt = function cbrt(x) {
            var y = mathf.pow(mathf.abs(x), 1 / 3);
            return x < 0 ? -y : y;
        });
        mathf.ceil = Math.ceil;
        mathf.cos = Math.cos;
        mathf.cosh = Math.cosh || (Math.cosh = function cosh(x) {
            return (Math.exp(x) + Math.exp(-x)) / 2;
        });

        mathf.exp = Math.exp;

        mathf.floor = Math.floor;
        mathf.fround = Math.fround || (Math.fround = function fround(x) {
            return x;
        });

        mathf.log = Math.log;
        mathf.log10 = Math.log10 || (Math.log10 = function log10(x) {
            return Math.log(x) / Math.LN10;
        });

        mathf.max = Math.max;
        mathf.min = Math.min;

        mathf.pow = Math.pow;

        mathf.random = Math.random;
        mathf.round = Math.round;

        mathf.sin = Math.sin;
        mathf.sinh = Math.sinh || (Math.sinh = function sinh(x) {
            return (Math.exp(x) - Math.exp(-x)) / 2;
        });
        mathf.sqrt = Math.sqrt;

        mathf.tan = Math.tan;
        mathf.tanh = Math.tanh || (Math.tanh = function tanh(x) {
            if (x === Infinity) {
                return 1;
            } else if (x === -Infinity) {
                return -1;
            } else {
                return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
            }
        });

        mathf.equals = function(a, b, e) {
            return mathf.abs(a - b) < (e !== void 0 ? e : mathf.EPSILON);
        };

        mathf.modulo = function(a, b) {
            var r = a % b;

            return (r * b < 0) ? r + b : r;
        };

        mathf.standardRadian = function(x) {
            return mathf.modulo(x, mathf.TWO_PI);
        };

        mathf.standardAngle = function(x) {
            return mathf.modulo(x, 360);
        };

        mathf.sign = function(x) {
            return x < 0 ? -1 : 1;
        };

        mathf.snap = function(x, y) {
            var m = x % y;
            return m < y ? x - m : x + y - m;
        };

        mathf.clamp = function(x, min, max) {
            return x < min ? min : x > max ? max : x;
        };

        mathf.clampBottom = function(x, min) {
            return x < min ? min : x;
        };

        mathf.clampTop = function(x, max) {
            return x > max ? max : x;
        };

        mathf.clamp01 = function(x) {
            return x < 0 ? 0 : x > 1 ? 1 : x;
        };

        mathf.truncate = function(x, n) {
            var p = mathf.pow(10, n),
                num = x * p;

            return (num < 0 ? mathf.ceil(num) : mathf.floor(num)) / p;
        };

        mathf.lerp = function(a, b, x) {
            return a + (b - a) * x;
        };

        mathf.lerpRadian = function(a, b, x) {
            return mathf.standardRadian(a + (b - a) * x);
        };

        mathf.lerpAngle = function(a, b, x) {
            return mathf.standardAngle(a + (b - a) * x);
        };

        mathf.lerpCos = function(a, b, x) {
            var ft = x * mathf.PI,
                f = (1 - mathf.cos(ft)) * 0.5;

            return a * (1 - f) + b * f;
        };

        mathf.lerpCubic = function(v0, v1, v2, v3, x) {
            var P, Q, R, S, Px, Qx, Rx;

            v0 || (v0 = v1);
            v3 || (v3 = v2);

            P = (v3 - v2) - (v0 - v1);
            Q = (v0 - v1) - P;
            R = v2 - v0;
            S = v1;

            Px = P * x;
            Qx = Q * x;
            Rx = R * x;

            return (Px * Px * Px) + (Qx * Qx) + Rx + S;
        };

        mathf.smoothStep = function(x, min, max) {
            if (x <= min) {
                return 0;
            }
            if (x >= max) {
                return 1;
            }

            x = (x - min) / (max - min);

            return x * x * (3 - 2 * x);
        };

        mathf.smootherStep = function(x, min, max) {
            if (x <= min) {
                return 0;
            }
            if (x >= max) {
                return 1;
            }

            x = (x - min) / (max - min);

            return x * x * x * (x * (x * 6 - 15) + 10);
        };

        mathf.pingPong = function(x, length) {
            length = length || 1;

            return length - mathf.abs(x % (2 * length) - length);
        };

        mathf.degsToRads = function(x) {
            return mathf.standardRadian(x * mathf.TO_RADS);
        };

        mathf.radsToDegs = function(x) {
            return mathf.standardAngle(x * mathf.TO_DEGS);
        };

        mathf.randInt = function(min, max) {
            return mathf.round(min + (mathf.random() * (max - min)));
        };

        mathf.randFloat = function(min, max) {
            return min + (mathf.random() * (max - min));
        };

        mathf.randSign = function() {
            return mathf.random() < 0.5 ? 1 : -1;
        };

        mathf.shuffle = function(array) {
            var i = array.length,
                j, x;

            while (i) {
                j = (mathf.random() * i--) | 0;
                x = array[i];
                array[i] = array[j];
                array[j] = x;
            }

            return array;
        };

        mathf.randArg = function() {
            return arguments[(mathf.random() * arguments.length) | 0];
        };

        mathf.randChoice = function(array) {
            return array[(mathf.random() * array.length) | 0];
        };

        mathf.randChoiceObject = function(object) {
            var objectKeys = keys(object);

            return object[objectKeys[(mathf.random() * objectKeys.length) | 0]];
        };

        mathf.isPowerOfTwo = function(x) {
            return (x & -x) === x;
        };

        mathf.floorPowerOfTwo = function(x) {
            var i = 2,
                prev;

            while (i < x) {
                prev = i;
                i *= 2;
            }

            return prev;
        };

        mathf.ceilPowerOfTwo = function(x) {
            var i = 2;

            while (i < x) {
                i *= 2;
            }

            return i;
        };

        var n225 = 0.39269908169872414,
            n675 = 1.1780972450961724,
            n1125 = 1.9634954084936207,
            n1575 = 2.748893571891069,
            n2025 = 3.5342917352885173,
            n2475 = 4.319689898685966,
            n2925 = 5.105088062083414,
            n3375 = 5.8904862254808625,

            RIGHT = "right",
            UP_RIGHT = "up_right",
            UP = "up",
            UP_LEFT = "up_left",
            LEFT = "left",
            DOWN_LEFT = "down_left",
            DOWN = "down",
            DOWN_RIGHT = "down_right";

        mathf.directionAngle = function(a) {
            a = mathf.standardRadian(a);

            return (
                (a >= n225 && a < n675) ? UP_RIGHT :
                (a >= n675 && a < n1125) ? UP :
                (a >= n1125 && a < n1575) ? UP_LEFT :
                (a >= n1575 && a < n2025) ? LEFT :
                (a >= n2025 && a < n2475) ? DOWN_LEFT :
                (a >= n2475 && a < n2925) ? DOWN :
                (a >= n2925 && a < n3375) ? DOWN_RIGHT :
                RIGHT
            );
        };

        mathf.direction = function(x, y) {
            var a = mathf.standardRadian(mathf.atan2(y, x));

            return (
                (a >= n225 && a < n675) ? UP_RIGHT :
                (a >= n675 && a < n1125) ? UP :
                (a >= n1125 && a < n1575) ? UP_LEFT :
                (a >= n1575 && a < n2025) ? LEFT :
                (a >= n2025 && a < n2475) ? DOWN_LEFT :
                (a >= n2475 && a < n2925) ? DOWN :
                (a >= n2925 && a < n3375) ? DOWN_RIGHT :
                RIGHT
            );
        };


    },
    function(require, exports, module, global) {

        var has = require(4),
            isNative = require(5),
            isObject = require(7);


        var nativeKeys = Object.keys;


        if (!isNative(nativeKeys)) {
            nativeKeys = function keys(obj) {
                var localHas = has,
                    out = [],
                    i = 0,
                    key;

                for (key in obj) {
                    if (localHas(obj, key)) {
                        out[i++] = key;
                    }
                }

                return out;
            };
        }

        module.exports = function keys(obj) {
            return nativeKeys(isObject(obj) ? obj : Object(obj));
        };


    },
    function(require, exports, module, global) {

        var hasOwnProp = Object.prototype.hasOwnProperty;


        module.exports = function has(obj, key) {
            return hasOwnProp.call(obj, key);
        };


    },
    function(require, exports, module, global) {

        var isFunction = require(6);


        var reHostCtor = /^\[object .+?Constructor\]$/,

            functionToString = Function.prototype.toString,

            reNative = RegExp("^" +
                functionToString.call(toString)
                .replace(/[.*+?^${}()|[\]\/\\]/g, "\\$&")
                .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
            ),

            isHostObject = (function() {
                try {
                    String({
                        "toString": 0
                    } + "");
                } catch (e) {
                    return function isHostObject() {
                        return false;
                    };
                }

                return function isHostObject(value) {
                    return !isFunction(value.toString) && typeof(value + "") === "string";
                };
            }());


        module.exports = function isNative(obj) {
            return obj && (
                isFunction(obj) ?
                reNative.test(functionToString.call(obj)) : (
                    typeof(obj) === "object" && (
                        (isHostObject(obj) ? reNative : reHostCtor).test(obj) || false
                    )
                )
            ) || false;
        };


    },
    function(require, exports, module, global) {

        var objectFunction = "[object Function]",
            toString = Object.prototype.toString,
            isFunction;


        if (typeof(/./) === "function" || (typeof(Uint8Array) !== "undefined" && typeof(Uint8Array) !== "function")) {
            isFunction = function isFunction(obj) {
                return toString.call(obj) === objectFunction;
            };
        } else {
            isFunction = function isFunction(obj) {
                return typeof(obj) === "function" || false;
            };
        }


        module.exports = isFunction;


    },
    function(require, exports, module, global) {

        module.exports = function isObject(obj) {
            var type = typeof(obj);
            return type === "function" || (obj && type === "object") || false;
        };


    },
    function(require, exports, module, global) {

        var mathf = require(2);


        var vec3 = module.exports;


        vec3.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : mathf.ArrayType;


        vec3.create = function(x, y, z) {
            var out = new vec3.ArrayType(3);

            out[0] = x !== undefined ? x : 0;
            out[1] = y !== undefined ? y : 0;
            out[2] = z !== undefined ? z : 0;

            return out;
        };

        vec3.copy = function(out, a) {

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];

            return out;
        };

        vec3.clone = function(a) {
            var out = new vec3.ArrayType(3);

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];

            return out;
        };

        vec3.set = function(out, x, y, z) {

            out[0] = x !== undefined ? x : 0;
            out[1] = y !== undefined ? y : 0;
            out[2] = z !== undefined ? z : 0;

            return out;
        };

        vec3.add = function(out, a, b) {

            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];

            return out;
        };

        vec3.sub = function(out, a, b) {

            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];

            return out;
        };

        vec3.mul = function(out, a, b) {

            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            out[2] = a[2] * b[2];

            return out;
        };

        vec3.div = function(out, a, b) {
            var bx = b[0],
                by = b[1],
                bz = b[2];

            out[0] = a[0] * (bx !== 0 ? 1 / bx : bx);
            out[1] = a[1] * (by !== 0 ? 1 / by : by);
            out[2] = a[2] * (bz !== 0 ? 1 / bz : bz);

            return out;
        };

        vec3.sadd = function(out, a, s) {

            out[0] = a[0] + s;
            out[1] = a[1] + s;
            out[2] = a[2] + s;

            return out;
        };

        vec3.ssub = function(out, a, s) {

            out[0] = a[0] - s;
            out[1] = a[1] - s;
            out[2] = a[2] - s;

            return out;
        };

        vec3.smul = function(out, a, s) {

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;

            return out;
        };

        vec3.sdiv = function(out, a, s) {
            s = s !== 0 ? 1 / s : s;

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;

            return out;
        };

        vec3.lengthSqValues = function(x, y, z) {

            return x * x + y * y + z * z;
        };

        vec3.lengthValues = function(x, y, z) {
            var lsq = vec3.lengthSqValues(x, y, z);

            return lsq !== 0 ? mathf.sqrt(lsq) : lsq;
        };

        vec3.invLengthValues = function(x, y, z) {
            var lsq = vec3.lengthSqValues(x, y, z);

            return lsq !== 0 ? 1 / mathf.sqrt(lsq) : lsq;
        };

        vec3.cross = function(out, a, b) {
            var ax = a[0],
                ay = a[1],
                az = a[2],
                bx = b[0],
                by = b[1],
                bz = b[2];

            out[0] = ay * bz - az * by;
            out[1] = az * bx - ax * bz;
            out[2] = ax * by - ay * bx;

            return out;
        };

        vec3.dot = function(a, b) {

            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
        };

        vec3.lengthSq = function(a) {

            return vec3.dot(a, a);
        };

        vec3.length = function(a) {
            var lsq = vec3.lengthSq(a);

            return lsq !== 0 ? mathf.sqrt(lsq) : lsq;
        };

        vec3.invLength = function(a) {
            var lsq = vec3.lengthSq(a);

            return lsq !== 0 ? 1 / mathf.sqrt(lsq) : lsq;
        };

        vec3.setLength = function(out, a, length) {
            var x = a[0],
                y = a[1],
                z = a[2],
                s = length * vec3.invLengthValues(x, y, z);

            out[0] = x * s;
            out[1] = y * s;
            out[2] = z * s;

            return out;
        };

        vec3.normalize = function(out, a) {
            var x = a[0],
                y = a[1],
                z = a[2],
                invlsq = vec3.invLengthValues(x, y, z);

            out[0] = x * invlsq;
            out[1] = y * invlsq;
            out[2] = z * invlsq;

            return out;
        };

        vec3.inverse = function(out, a) {

            out[0] = a[0] * -1;
            out[1] = a[1] * -1;
            out[2] = a[2] * -1;

            return out;
        };

        vec3.lerp = function(out, a, b, x) {
            var lerp = mathf.lerp;

            out[0] = lerp(a[0], b[0], x);
            out[1] = lerp(a[1], b[1], x);
            out[2] = lerp(a[2], b[2], x);

            return out;
        };

        vec3.min = function(out, a, b) {
            var ax = a[0],
                ay = a[1],
                az = a[2],
                bx = b[0],
                by = b[1],
                bz = b[2];

            out[0] = bx < ax ? bx : ax;
            out[1] = by < ay ? by : ay;
            out[2] = bz < az ? bz : az;

            return out;
        };

        vec3.max = function(out, a, b) {
            var ax = a[0],
                ay = a[1],
                az = a[2],
                bx = b[0],
                by = b[1],
                bz = b[2];

            out[0] = bx > ax ? bx : ax;
            out[1] = by > ay ? by : ay;
            out[2] = bz > az ? bz : az;

            return out;
        };

        vec3.clamp = function(out, a, min, max) {
            var x = a[0],
                y = a[1],
                z = a[2],
                minx = min[0],
                miny = min[1],
                minz = min[2],
                maxx = max[0],
                maxy = max[1],
                maxz = max[2];

            out[0] = x < minx ? minx : x > maxx ? maxx : x;
            out[1] = y < miny ? miny : y > maxy ? maxy : y;
            out[2] = z < minz ? minz : z > maxz ? maxz : z;

            return out;
        };

        vec3.transformMat3 = function(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2];

            out[0] = x * m[0] + y * m[3] + z * m[6];
            out[1] = x * m[1] + y * m[4] + z * m[7];
            out[2] = x * m[2] + y * m[5] + z * m[8];

            return out;
        };

        vec3.transformMat4 = function(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2];

            out[0] = x * m[0] + y * m[4] + z * m[8] + m[12];
            out[1] = x * m[1] + y * m[5] + z * m[9] + m[13];
            out[2] = x * m[2] + y * m[6] + z * m[10] + m[14];

            return out;
        };

        vec3.transformMat4Rotation = function(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2];

            out[0] = x * m[0] + y * m[4] + z * m[8];
            out[1] = x * m[1] + y * m[5] + z * m[9];
            out[2] = x * m[2] + y * m[6] + z * m[10];

            return out;
        };

        vec3.transformProjection = function(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2],
                d = x * m[3] + y * m[7] + z * m[11] + m[15];

            d = d !== 0 ? 1 / d : d;

            out[0] = (x * m[0] + y * m[4] + z * m[8] + m[12]) * d;
            out[1] = (x * m[1] + y * m[5] + z * m[9] + m[13]) * d;
            out[2] = (x * m[2] + y * m[6] + z * m[10] + m[14]) * d;

            return out;
        };

        vec3.transformQuat = function(out, a, q) {
            var x = a[0],
                y = a[1],
                z = a[2],
                qx = q[0],
                qy = q[1],
                qz = q[2],
                qw = q[3],

                ix = qw * x + qy * z - qz * y,
                iy = qw * y + qz * x - qx * z,
                iz = qw * z + qx * y - qy * x,
                iw = -qx * x - qy * y - qz * z;

            out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
            out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
            out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;

            return out;
        };

        vec3.positionFromMat4 = function(out, m) {

            out[0] = m[12];
            out[1] = m[13];
            out[2] = m[14];

            return out;
        };

        vec3.scaleFromMat3 = function(out, m) {

            out[0] = vec3.lengthValues(m[0], m[3], m[6]);
            out[1] = vec3.lengthValues(m[1], m[4], m[7]);
            out[2] = vec3.lengthValues(m[2], m[5], m[8]);

            return out;
        };

        vec3.scaleFromMat4 = function(out, m) {

            out[0] = vec3.lengthValues(m[0], m[4], m[8]);
            out[1] = vec3.lengthValues(m[1], m[5], m[9]);
            out[2] = vec3.lengthValues(m[2], m[6], m[10]);

            return out;
        };

        vec3.equal = function(a, b) {
            return !(
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2]
            );
        };

        vec3.notEqual = function(a, b) {
            return (
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2]
            );
        };

        vec3.str = function(out) {

            return "Vec3(" + out[0] + ", " + out[1] + ", " + out[2] + ")";
        };


    },
    function(require, exports, module, global) {

        var environment = require(10),
            emptyFunction = require(11),
            time = require(12);


        var window = environment.window,

            nativeRequestAnimationFrame = (
                window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame
            ),

            nativeCancelAnimationFrame = (
                window.cancelAnimationFrame ||
                window.cancelRequestAnimationFrame ||

                window.webkitCancelAnimationFrame ||
                window.webkitCancelRequestAnimationFrame ||

                window.mozCancelAnimationFrame ||
                window.mozCancelRequestAnimationFrame ||

                window.oCancelAnimationFrame ||
                window.oCancelRequestAnimationFrame ||

                window.msCancelAnimationFrame ||
                window.msCancelRequestAnimationFrame
            ),

            requestAnimationFrame, lastTime, max;


        if (nativeRequestAnimationFrame) {
            requestAnimationFrame = function requestAnimationFrame(callback, element) {
                return nativeRequestAnimationFrame.call(window, callback, element);
            };
        } else {
            max = Math.max;
            lastTime = 0;

            requestAnimationFrame = function requestAnimationFrame(callback) {
                var current = time.now(),
                    timeToCall = max(0, 16 - (current - lastTime)),
                    id = global.setTimeout(
                        function runCallback() {
                            callback(current + timeToCall);
                        },
                        timeToCall
                    );

                lastTime = current + timeToCall;
                return id;
            };
        }


        if (nativeCancelAnimationFrame) {
            requestAnimationFrame.cancel = function(id) {
                return nativeCancelAnimationFrame.call(window, id);
            };
        } else {
            requestAnimationFrame.cancel = function(id) {
                return global.clearTimeout(id);
            };
        }


        requestAnimationFrame(emptyFunction);


        module.exports = requestAnimationFrame;


    },
    function(require, exports, module, global) {

        var environment = module.exports,

            hasWindow = typeof(window) !== "undefined",
            userAgent = hasWindow ? window.navigator.userAgent : "";


        environment.browser = !!(
            hasWindow &&
            typeof(navigator) !== "undefined" &&
            window.document
        );

        environment.node = !environment.browser;

        environment.mobile = environment.browser && /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());

        environment.window = (
            hasWindow ? window :
            typeof(global) !== "undefined" ? global :
            typeof(self) !== "undefined" ? self : {}
        );

        environment.pixelRatio = environment.window.devicePixelRatio || 1;

        environment.document = typeof(document) !== "undefined" ? document : {};

        environment.isInWorker = typeof(importScripts) !== "undefined";


    },
    function(require, exports, module, global) {

        module.exports = emptyFunction;


        function emptyFunction() {}

        function makeEmptyFunction(value) {
            return function() {
                return value;
            };
        }

        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function() {
            return this;
        };
        emptyFunction.thatReturnsArgument = function(argument) {
            return argument;
        };


    },
    function(require, exports, module, global) {

        var process = require(13);
        var environment = require(10);


        var time = module.exports,
            dateNow, performance, HR_TIME, START_MS, now;


        dateNow = Date.now || function now() {
            return (new Date()).getTime();
        };


        if (environment.node) {
            HR_TIME = process.hrtime();

            now = function now() {
                var hrtime = process.hrtime(HR_TIME),
                    ms = hrtime[0] * 1e3,
                    ns = hrtime[1] * 1e-6;

                return ms + ns;
            };
        } else {
            performance = environment.window.performance || {};

            performance.now = (
                performance.now ||
                performance.webkitNow ||
                performance.mozNow ||
                performance.msNow ||
                performance.oNow ||
                function now() {
                    return dateNow() - START_MS;
                }
            );

            now = function now() {
                return performance.now();
            };
        }

        START_MS = dateNow();

        time.now = now;

        time.stamp = function stamp() {
            return START_MS + now();
        };


    },
    function(require, exports, module, global) {

        // shim for using process in browser

        var process = module.exports = {};

        process.nextTick = (function() {
            var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
            var canMutationObserver = typeof window !== 'undefined' && window.MutationObserver;
            var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

            if (canSetImmediate) {
                return function(f) {
                    return window.setImmediate(f)
                };
            }

            var queue = [];

            if (canMutationObserver) {
                var hiddenDiv = document.createElement("div");
                var observer = new MutationObserver(function() {
                    var queueList = queue.slice();
                    queue.length = 0;
                    queueList.forEach(function(fn) {
                        fn();
                    });
                });

                observer.observe(hiddenDiv, {
                    attributes: true
                });

                return function nextTick(fn) {
                    if (!queue.length) {
                        hiddenDiv.setAttribute('yes', 'no');
                    }
                    queue.push(fn);
                };
            }

            if (canPost) {
                window.addEventListener('message', function(ev) {
                    var source = ev.source;
                    if ((source === window || source === null) && ev.data === 'process-tick') {
                        ev.stopPropagation();
                        if (queue.length > 0) {
                            var fn = queue.shift();
                            fn();
                        }
                    }
                }, true);

                return function nextTick(fn) {
                    queue.push(fn);
                    window.postMessage('process-tick', '*');
                };
            }

            return function nextTick(fn) {
                setTimeout(fn, 0);
            };
        })();

        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;

        process.binding = function(name) {
            throw new Error('process.binding is not supported');
        };

        // TODO(shtylman)
        process.cwd = function() {
            return '/'
        };
        process.chdir = function(dir) {
            throw new Error('process.chdir is not supported');
        };


    },
    function(require, exports, module, global) {

        var mathf = require(2),

            environment = require(10),
            EventEmitter = require(15),
            eventListener = require(22),
            color = require(25),

            enums = require(26),
            WebGLBuffer = require(39),
            WebGLTexture = require(40),
            WebGLProgram = require(42);


        var NativeUint8Array = typeof(Uint8Array) !== "undefined" ? Uint8Array : Array,
            CullFace = enums.CullFace,
            Blending = enums.Blending,
            Depth = enums.Depth;


        module.exports = WebGLContext;


        WebGLContext.enums = enums;
        WebGLContext.WebGLTexture = WebGLTexture;
        WebGLContext.WebGLProgram = WebGLProgram;


        function WebGLContext() {

            EventEmitter.call(this);

            this.gl = null;
            this.canvas = null;

            this.__attributes = {};

            this.__textures = {};

            this.__precision = null;
            this.__extensions = {};

            this.__maxAnisotropy = null;
            this.__maxTextures = null;
            this.__maxVertexTextures = null;
            this.__maxTextureSize = null;
            this.__maxCubeTextureSize = null;
            this.__maxRenderBufferSize = null;

            this.__maxUniforms = null;
            this.__maxVaryings = null;
            this.__maxAttributes = null;

            this.__enabledAttributes = null;

            this.__viewportX = null;
            this.__viewportY = null;
            this.__viewportWidth = null;
            this.__viewportHeight = null;

            this.__clearColor = color.create();
            this.__clearAlpha = null;

            this.__blending = null;
            this.__blendingDisabled = null;
            this.__cullFace = null;
            this.__cullFaceDisabled = null;
            this.__depthFunc = null;
            this.__depthTestDisabled = null;
            this.__depthWrite = null;
            this.__lineWidth = null;

            this.__program = null;
            this.__programForce = null;

            this.__textureIndex = null;
            this.__activeIndex = null;
            this.__activeTexture = null;

            this.__arrayBuffer = null;
            this.__elementArrayBuffer = null;

            this.__handlerContextLost = null;
            this.__handlerContextRestored = null;
        }
        EventEmitter.extend(WebGLContext);

        WebGLContext.prototype.setAttributes = function(attributes) {

            getAttributes(this.__attributes, attributes);

            if (this.gl) {
                WebGLContext_getGLContext(this);
            }

            return this;
        };

        WebGLContext.prototype.setCanvas = function(canvas, attributes) {
            var _this = this,
                thisCanvas = this.canvas;

            if (thisCanvas) {
                if (thisCanvas !== canvas) {
                    eventListener.off(thisCanvas, "webglcontextlost", this.__handlerContextLost);
                    eventListener.off(thisCanvas, "webglcontextrestored", this.__handlerContextRestored);
                } else {
                    return this;
                }
            }

            getAttributes(this.__attributes, attributes);
            this.canvas = canvas;

            this.__handlerContextLost = this.__handlerContextLost || function handlerContextLost(e) {
                handleWebGLContextContextLost(_this, e);
            };
            this.__handlerContextRestored = this.__handlerContextRestored || function handlerContextRestored(e) {
                handleWebGLContextContextRestored(_this, e);
            };

            eventListener.on(canvas, "webglcontextlost", this.__handlerContextLost);
            eventListener.on(canvas, "webglcontextrestored", this.__handlerContextRestored);

            WebGLContext_getGLContext(this);

            return this;
        };

        WebGLContext.prototype.clearGL = function() {

            this.gl = null;

            this.__textures = {};

            this.__precision = null;
            this.__extensions = {};

            this.__maxAnisotropy = null;
            this.__maxTextures = null;
            this.__maxVertexTextures = null;
            this.__maxTextureSize = null;
            this.__maxCubeTextureSize = null;
            this.__maxRenderBufferSize = null;

            this.__maxUniforms = null;
            this.__maxVaryings = null;
            this.__maxAttributes = null;

            this.__enabledAttributes = null;

            this.__viewportX = null;
            this.__viewportY = null;
            this.__viewportWidth = null;
            this.__viewportHeight = null;

            color.set(this.__clearColor, 0, 0, 0);
            this.__clearAlpha = null;

            this.__blending = null;
            this.__blendingDisabled = true;
            this.__cullFace = null;
            this.__cullFaceDisabled = true;
            this.__depthFunc = null;
            this.__depthTestDisabled = true;
            this.__depthWrite = null;
            this.__lineWidth = null;

            this.__program = null;
            this.__programForce = null;

            this.__textureIndex = null;
            this.__activeIndex = null;
            this.__activeTexture = null;

            this.__arrayBuffer = null;
            this.__elementArrayBuffer = null;

            return this;
        };

        WebGLContext.prototype.resetGL = function() {

            this.__textures = {};

            this.__viewportX = null;
            this.__viewportY = null;
            this.__viewportWidth = null;
            this.__viewportHeight = null;

            this.__clearAlpha = null;

            this.__blending = null;
            this.__blendingDisabled = true;
            this.__cullFace = null;
            this.__cullFaceDisabled = true;
            this.__depthFunc = null;
            this.__depthTestDisabled = true;
            this.__depthWrite = null;
            this.__lineWidth = null;

            this.__program = null;
            this.__programForce = null;

            this.__textureIndex = null;
            this.__activeIndex = null;
            this.__activeTexture = null;

            this.__arrayBuffer = null;
            this.__elementArrayBuffer = null;

            this.disableAttributes();
            this.setViewport(0, 0, 1, 1);
            this.setDepthWrite(true);
            this.setLineWidth(1);
            this.setDepthFunc(Depth.Less);
            this.setCullFace(CullFace.Back);
            this.setBlending(Blending.Default);
            this.setClearColor(color.set(this.__clearColor, 0, 0, 0), 1);
            this.setProgram(null);
            this.clearCanvas();

            return this;
        };

        WebGLContext.prototype.clampMaxSize = function(image, isCubeMap) {
            var maxSize = isCubeMap ? this.__maxCubeTextureSize : this.__maxTextureSize,
                maxDim, newWidth, newHeight, canvas, ctx;

            if (!image || (image.height <= maxSize && image.width <= maxSize)) {
                return image;
            }

            maxDim = 1 / mathf.max(image.width, image.height);
            newWidth = (image.width * maxSize * maxDim) | 0;
            newHeight = (image.height * maxSize * maxDim) | 0;
            canvas = document.createElement("canvas");
            ctx = canvas.getContext("2d");

            canvas.width = newWidth;
            canvas.height = newHeight;
            ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight);

            return canvas;
        };

        WebGLContext.prototype.setProgram = function(program, force) {
            if (this.__program !== program || force) {
                this.__program = program;
                this.__programForce = true;

                if (program) {
                    this.gl.useProgram(program.glProgram);
                } else {
                    this.gl.useProgram(null);
                }
            } else {
                this.__programForce = false;
            }

            this.__textureIndex = 0;
            this.__activeIndex = -1;

            return this;
        };

        WebGLContext.prototype.setTexture = function(location, texture, force) {
            var gl = this.gl,
                webglTexture = this.createTexture(texture),
                index = this.__textureIndex++,
                needsUpdate = this.__activeIndex !== index;

            this.__activeIndex = index;

            if (this.__activeTexture !== webglTexture || force) {
                this.__activeTexture = webglTexture;

                if (webglTexture.isCubeMap) {
                    gl.bindTexture(gl.TEXTURE_CUBE_MAP, webglTexture.getGLTexture());
                } else {
                    gl.bindTexture(gl.TEXTURE_2D, webglTexture.getGLTexture());
                }

                if (needsUpdate || this.__programForce || force) {
                    gl.activeTexture(gl.TEXTURE0 + index);
                    gl.uniform1i(location, index);
                }

                return true;
            } else {
                return false;
            }
        };

        WebGLContext.prototype.setArrayBuffer = function(buffer, force) {
            var gl = this.gl;

            if (this.__arrayBuffer !== buffer || force) {
                this.disableAttributes();
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer.glBuffer);
                this.__arrayBuffer = buffer;
                return true;
            } else {
                return false;
            }
        };

        WebGLContext.prototype.setElementArrayBuffer = function(buffer, force) {
            var gl = this.gl;

            if (this.__elementArrayBuffer !== buffer || force) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer.glBuffer);
                this.__elementArrayBuffer = buffer;
                return true;
            } else {
                return false;
            }
        };

        WebGLContext.prototype.setAttribPointer = function(location, itemSize, type, stride, offset, force) {
            var gl = this.gl;

            if (this.enableAttribute(location) || force) {
                gl.vertexAttribPointer(location, itemSize, type, gl.FALSE, stride, offset);
                return true;
            } else {
                return false;
            }
        };

        WebGLContext.prototype.createProgram = function() {
            return new WebGLProgram(this);
        };

        WebGLContext.prototype.createTexture = function(texture) {
            var textures = this.__textures;
            return textures[texture.__id] || (textures[texture.__id] = new WebGLTexture(this, texture));
        };

        WebGLContext.prototype.createBuffer = function() {
            return new WebGLBuffer(this);
        };

        WebGLContext.prototype.deleteProgram = function(program) {
            this.gl.deleteProgram(program.glProgram);
            return this;
        };

        WebGLContext.prototype.deleteTexture = function(texture) {
            this.gl.deleteTexture(texture.glTexture);
            return this;
        };

        WebGLContext.prototype.deleteBuffer = function(buffer) {
            this.gl.deleteBuffer(buffer.glBuffer);
            return this;
        };

        WebGLContext.prototype.setViewport = function(x, y, width, height) {
            x = x || 0;
            y = y || 0;
            width = width || 1;
            height = height || 1;

            if (
                this.__viewportX !== x ||
                this.__viewportY !== y ||
                this.__viewportWidth !== width ||
                this.__viewportHeight !== height
            ) {
                this.__viewportX = x;
                this.__viewportY = y;
                this.__viewportWidth = width;
                this.__viewportHeight = height;

                this.gl.viewport(x, y, width, height);
            }

            return this;
        };

        WebGLContext.prototype.setDepthWrite = function(depthWrite) {

            if (this.__depthWrite !== depthWrite) {
                this.__depthWrite = depthWrite;
                this.gl.depthMask(depthWrite);
            }

            return this;
        };

        WebGLContext.prototype.setLineWidth = function(width) {

            if (this.__lineWidth !== width) {
                this.__lineWidth = width;
                this.gl.lineWidth(width);
            }

            return this;
        };

        WebGLContext.prototype.setDepthFunc = function(depthFunc) {
            var gl = this.gl;

            if (this.__depthFunc !== depthFunc) {
                switch (depthFunc) {
                    case Depth.Never:
                        if (this.__depthTestDisabled) {
                            gl.enable(gl.DEPTH_TEST);
                        }
                        gl.depthFunc(gl.NEVER);
                        break;
                    case Depth.Less:
                        if (this.__depthTestDisabled) {
                            gl.enable(gl.DEPTH_TEST);
                        }
                        gl.depthFunc(gl.LESS);
                        break;
                    case Depth.Equal:
                        if (this.__depthTestDisabled) {
                            gl.enable(gl.DEPTH_TEST);
                        }
                        gl.depthFunc(gl.EQUAL);
                        break;
                    case Depth.LessThenOrEqual:
                        if (this.__depthTestDisabled) {
                            gl.enable(gl.DEPTH_TEST);
                        }
                        gl.depthFunc(gl.LEQUAL);
                        break;
                    case Depth.Greater:
                        if (this.__depthTestDisabled) {
                            gl.enable(gl.DEPTH_TEST);
                        }
                        gl.depthFunc(gl.GREATER);
                        break;
                    case Depth.NotEqual:
                        if (this.__depthTestDisabled) {
                            gl.enable(gl.DEPTH_TEST);
                        }
                        gl.depthFunc(gl.NOTEQUAL);
                        break;
                    case Depth.GreaterThanOrEqual:
                        if (this.__depthTestDisabled) {
                            gl.enable(gl.DEPTH_TEST);
                        }
                        gl.depthFunc(gl.GEQUAL);
                        break;
                    case Depth.Always:
                        if (this.__depthTestDisabled) {
                            gl.enable(gl.DEPTH_TEST);
                        }
                        gl.depthFunc(gl.ALWAYS);
                        break;
                    default:
                        this.__depthTestDisabled = true;
                        this.__depthFunc = Depth.None;
                        gl.disable(gl.DEPTH_TEST);
                        return this;
                }

                this.__depthTestDisabled = false;
                this.__depthFunc = depthFunc;
            }

            return this;
        };

        WebGLContext.prototype.setCullFace = function(cullFace) {
            var gl = this.gl;

            if (this.__cullFace !== cullFace) {
                switch (cullFace) {
                    case CullFace.Back:
                        if (this.__cullFaceDisabled) {
                            gl.enable(gl.CULL_FACE);
                        }
                        gl.cullFace(gl.BACK);
                        break;
                    case CullFace.Front:
                        if (this.__cullFaceDisabled) {
                            gl.enable(gl.CULL_FACE);
                        }
                        gl.cullFace(gl.FRONT);
                        break;
                    case CullFace.FrontBack:
                        if (this.__cullFaceDisabled) {
                            gl.enable(gl.CULL_FACE);
                        }
                        gl.cullFace(gl.FRONT_AND_BACK);
                        break;
                    default:
                        this.__cullFaceDisabled = true;
                        this.__cullFace = CullFace.None;
                        gl.disable(gl.CULL_FACE);
                        return this;
                }

                this.__cullFaceDisabled = false;
                this.__cullFace = cullFace;
            }

            return this;
        };

        WebGLContext.prototype.setBlending = function(blending) {
            var gl = this.gl;

            if (this.__blending !== blending) {
                switch (blending) {
                    case Blending.Additive:
                        if (this.__blendingDisabled) {
                            gl.enable(gl.BLEND);
                        }
                        gl.blendEquation(gl.FUNC_ADD);
                        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                        break;
                    case Blending.Subtractive:
                        if (this.__blendingDisabled) {
                            gl.enable(gl.BLEND);
                        }
                        gl.blendEquation(gl.FUNC_ADD);
                        gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);
                        break;
                    case Blending.Muliply:
                        if (this.__blendingDisabled) {
                            gl.enable(gl.BLEND);
                        }
                        gl.blendEquation(gl.FUNC_ADD);
                        gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                        break;
                    case Blending.Default:
                        if (this.__blendingDisabled) {
                            gl.enable(gl.BLEND);
                        }
                        gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    default:
                        gl.disable(gl.BLEND);
                        this.__blendingDisabled = true;
                        this.__blending = Blending.None;
                        return this;
                }

                this.__blendingDisabled = false;
                this.__blending = blending;
            }

            return this;
        };

        WebGLContext.prototype.setClearColor = function(clearColor, alpha) {
            alpha = alpha || 1;

            if (color.notEqual(this.__clearColor, clearColor) || alpha !== this.__clearAlpha) {

                color.copy(this.__clearColor, clearColor);
                this.__clearAlpha = alpha;

                this.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], alpha);
            }

            return this;
        };

        WebGLContext.prototype.scissor = function(x, y, width, height) {
            this.gl.scissor(x, y, width, height);
            return this;
        };

        WebGLContext.prototype.clearCanvas = function(color, depth, stencil) {
            var gl = this.gl,
                bits = 0;

            if (color !== false) {
                bits |= gl.COLOR_BUFFER_BIT;
            }
            if (depth !== false) {
                bits |= gl.DEPTH_BUFFER_BIT;
            }
            if (stencil !== false) {
                bits |= gl.STENCIL_BUFFER_BIT;
            }

            gl.clear(bits);

            return this;
        };

        WebGLContext.prototype.clearColor = function() {
            var gl = this.gl;

            gl.clear(gl.COLOR_BUFFER_BIT);
            return this;
        };

        WebGLContext.prototype.clearDepth = function() {
            var gl = this.gl;

            gl.clear(gl.DEPTH_BUFFER_BIT);
            return this;
        };

        WebGLContext.prototype.clearStencil = function() {
            var gl = this.gl;

            gl.clear(gl.STENCIL_BUFFER_BIT);
            return this;
        };

        WebGLContext.prototype.enableAttribute = function(attribute) {
            var enabledAttributes = this.__enabledAttributes;

            if (enabledAttributes[attribute] === 0) {
                this.gl.enableVertexAttribArray(attribute);
                enabledAttributes[attribute] = 1;
                return true;
            } else {
                return false;
            }
        };

        WebGLContext.prototype.disableAttribute = function(attribute) {
            var enabledAttributes = this.__enabledAttributes;

            if (enabledAttributes[attribute] === 1) {
                this.gl.disableVertexAttribArray(attribute);
                enabledAttributes[attribute] = 0;
                return true;
            } else {
                return false;
            }
        };

        WebGLContext.prototype.disableAttributes = function() {
            var gl = this.gl,
                i = this.__maxAttributes,
                enabledAttributes = this.__enabledAttributes;

            while (i--) {
                if (enabledAttributes[i] === 1) {
                    gl.disableVertexAttribArray(i);
                    enabledAttributes[i] = 0;
                }
            }

            return this;
        };

        var getExtension_lowerPrefixes = ["webkit", "moz", "o", "ms"],
            getExtension_upperPrefixes = ["WEBKIT", "MOZ", "O", "MS"];

        WebGLContext.prototype.getExtension = function(name, throwError) {
            var gl = this.gl,
                extensions = this.__extensions || (this.__extensions = {}),
                extension = extensions[name] || (extensions[name] = gl.getExtension(name)),
                i;

            if (extension == null) {
                i = getExtension_upperPrefixes.length;

                while (i--) {
                    if ((extension = gl.getExtension(getExtension_upperPrefixes[i] + "_" + name))) {
                        extensions[name] = extension;
                        break;
                    }
                }
            }
            if (extension == null) {
                i = getExtension_lowerPrefixes.length;

                while (i--) {
                    if ((extension = gl.getExtension(getExtension_lowerPrefixes[i] + name))) {
                        extensions[name] = extension;
                        break;
                    }
                }
            }

            if (extension == null) {
                if (throwError) {
                    throw new Error("WebGLContext.getExtension: could not get Extension " + name);
                } else {
                    return null;
                }
            } else {
                return extension;
            }
        };


        function getAttributes(attributes, options) {
            options = options || {};

            attributes.alpha = options.alpha != null ? !!options.alpha : true;
            attributes.antialias = options.antialias != null ? !!options.antialias : true;
            attributes.depth = options.depth != null ? !!options.depth : true;
            attributes.premultipliedAlpha = options.premultipliedAlpha != null ? !!options.premultipliedAlpha : true;
            attributes.preserveDrawingBuffer = options.preserveDrawingBuffer != null ? !!options.preserveDrawingBuffer : false;
            attributes.stencil = options.stencil != null ? !!options.stencil : true;

            return attributes;
        }

        function handleWebGLContextContextLost(_this, e) {
            e.preventDefault();
            _this.clearGL();
            _this.emit("webglcontextlost", e);
        }

        function handleWebGLContextContextRestored(_this, e) {
            e.preventDefault();
            WebGLContext_getGLContext(_this);
            _this.emit("webglcontextrestored", e);
        }

        function WebGLContext_getGLContext(_this) {
            var gl;

            if (_this.gl != null) {
                _this.clearGL();
            }

            gl = getWebGLContext(_this.canvas, _this.__attributes);

            if (gl == null) {
                _this.emit("webglcontextcreationfailed");
                return;
            }

            if (!gl.getShaderPrecisionFormat) {
                gl.getShaderPrecisionFormat = getShaderPrecisionFormat;
            }

            _this.gl = gl;
            getGPUInfo(_this);
            _this.resetGL();
        }

        function getShaderPrecisionFormat() {
            return {
                rangeMin: 1,
                rangeMax: 1,
                precision: 1
            };
        }

        function getGPUInfo(_this) {
            var gl = _this.gl,

                VERTEX_SHADER = gl.VERTEX_SHADER,
                FRAGMENT_SHADER = gl.FRAGMENT_SHADER,
                HIGH_FLOAT = gl.HIGH_FLOAT,
                MEDIUM_FLOAT = gl.MEDIUM_FLOAT,

                EXT_tfa = _this.getExtension("EXT_texture_filter_anisotropic"),

                vsHighpFloat = gl.getShaderPrecisionFormat(VERTEX_SHADER, HIGH_FLOAT),
                vsMediumpFloat = gl.getShaderPrecisionFormat(VERTEX_SHADER, MEDIUM_FLOAT),

                fsHighpFloat = gl.getShaderPrecisionFormat(FRAGMENT_SHADER, HIGH_FLOAT),
                fsMediumpFloat = gl.getShaderPrecisionFormat(FRAGMENT_SHADER, MEDIUM_FLOAT),

                highpAvailable = vsHighpFloat.precision > 0 && fsHighpFloat.precision > 0,
                mediumpAvailable = vsMediumpFloat.precision > 0 && fsMediumpFloat.precision > 0,

                precision = "highp";

            if (!highpAvailable || environment.mobile) {
                if (mediumpAvailable) {
                    precision = "mediump";
                } else {
                    precision = "lowp";
                }
            }

            _this.__precision = precision;
            _this.__maxAnisotropy = EXT_tfa ? gl.getParameter(EXT_tfa.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;
            _this.__maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            _this.__maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
            _this.__maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            _this.__maxCubeTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
            _this.__maxRenderBufferSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);

            _this.__maxUniforms = mathf.max(
                gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS), gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS)
            ) * 4;
            _this.__maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS) * 4;
            _this.__maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);

            _this.__enabledAttributes = new NativeUint8Array(_this.__maxAttributes);
        }

        var getWebGLContext_webglNames = ["3d", "moz-webgl", "experimental-webgl", "webkit-3d", "webgl"],
            getWebGLContext_attuibutes = {
                alpha: true,
                antialias: true,
                depth: true,
                premultipliedAlpha: true,
                preserveDrawingBuffer: false,
                stencil: true
            };

        function getWebGLContext(canvas, attributes) {
            var i = getWebGLContext_webglNames.length,
                gl, key;

            attributes = attributes || {};

            for (key in getWebGLContext_attuibutes) {
                if (attributes[key] == null) {
                    attributes[key] = getWebGLContext_attuibutes[key];
                }
            }

            while (i--) {
                try {
                    gl = canvas.getContext(getWebGLContext_webglNames[i], attributes);
                    if (gl) {
                        return gl;
                    }
                } catch (e) {}
            }
            if (!gl) {
                throw new Error("WebGLContext: could not get a WebGL Context");
            }

            return gl;
        }


    },
    function(require, exports, module, global) {

        var isFunction = require(6),
            inherits = require(16),
            fastSlice = require(21),
            keys = require(3);


        function EventEmitter(maxListeners) {

            this.__events = {};
            this.__maxListeners = maxListeners != null ? maxListeners : EventEmitter.defaultMaxListeners;
        }

        EventEmitter.prototype.on = function(name, listener) {
            var events, eventList, maxListeners;

            if (!isFunction(listener)) {
                throw new TypeError("EventEmitter.on(name, listener) listener must be a function");
            }

            events = this.__events || (this.__events = {});
            eventList = (events[name] || (events[name] = []));
            maxListeners = this.__maxListeners || -1;

            eventList[eventList.length] = listener;

            if (maxListeners !== -1 && eventList.length > maxListeners) {
                console.error("EventEmitter.on(type, listener) possible EventEmitter memory leak detected. " + maxListeners + " listeners added");
            }

            return this;
        };

        EventEmitter.prototype.addListener = EventEmitter.prototype.on;

        EventEmitter.prototype.once = function(name, listener) {
            var _this = this;

            function once() {
                var length = arguments.length;

                _this.off(name, once);

                if (length === 0) {
                    return listener();
                } else if (length === 1) {
                    return listener(arguments[0]);
                } else if (length === 2) {
                    return listener(arguments[0], arguments[1]);
                } else if (length === 3) {
                    return listener(arguments[0], arguments[1], arguments[2]);
                } else if (length === 4) {
                    return listener(arguments[0], arguments[1], arguments[2], arguments[3]);
                } else {
                    return listener.apply(null, arguments);
                }
            }

            this.on(name, once);

            return once;
        };

        EventEmitter.prototype.listenTo = function(obj, name) {
            var _this = this;

            if (!(type.isFunction(obj.on) || type.isFunction(obj.addListener))) {
                throw new TypeError("EventEmitter.listenTo(obj, name) obj must have a on function taking (name, listener[, ctx])");
            }

            function handler() {
                _this.emitArgs(name, arguments);
            }

            obj.on(name, handler);

            return handler;
        };

        EventEmitter.prototype.off = function(name, listener) {
            var events = this.__events || (this.__events = {}),
                eventList, event, i;

            eventList = events[name];
            if (!eventList) {
                return this;
            }

            if (!listener) {
                i = eventList.length;

                while (i--) {
                    this.emit("removeListener", name, eventList[i]);
                }
                eventList.length = 0;
                delete events[name];
            } else {
                i = eventList.length;

                while (i--) {
                    event = eventList[i];

                    if (event === listener) {
                        this.emit("removeListener", name, event);
                        eventList.splice(i, 1);
                    }
                }

                if (eventList.length === 0) {
                    delete events[name];
                }
            }

            return this;
        };

        EventEmitter.prototype.removeListener = EventEmitter.prototype.off;

        EventEmitter.prototype.removeAllListeners = function() {
            var events = this.__events || (this.__events = {}),
                objectKeys = keys(events),
                i = -1,
                il = objectKeys.length - 1,
                key, eventList, j;

            while (i++ < il) {
                key = objectKeys[i];
                eventList = events[key];

                if (eventList) {
                    j = eventList.length;

                    while (j--) {
                        this.emit("removeListener", key, eventList[j]);
                        eventList.splice(j, 1);
                    }
                }

                delete events[key];
            }

            return this;
        };

        function emit(eventList, args) {
            var a1, a2, a3, a4,
                length = eventList.length - 1,
                i = -1,
                event;

            switch (args.length) {
                case 0:
                    while (i++ < length) {
                        (event = eventList[i]) && event();
                    }
                    break;
                case 1:
                    a1 = args[0];
                    while (i++ < length) {
                        (event = eventList[i]) && event(a1);
                    }
                    break;
                case 2:
                    a1 = args[0];
                    a2 = args[1];
                    while (i++ < length) {
                        (event = eventList[i]) && event(a1, a2);
                    }
                    break;
                case 3:
                    a1 = args[0];
                    a2 = args[1];
                    a3 = args[2];
                    while (i++ < length) {
                        (event = eventList[i]) && event(a1, a2, a3);
                    }
                    break;
                case 4:
                    a1 = args[0];
                    a2 = args[1];
                    a3 = args[2];
                    a4 = args[3];
                    while (i++ < length) {
                        (event = eventList[i]) && event(a1, a2, a3, a4);
                    }
                    break;
                default:
                    while (i++ < length) {
                        (event = eventList[i]) && event.apply(null, args);
                    }
                    break;
            }
        }

        EventEmitter.prototype.emit = function(name) {
            var eventList = (this.__events || (this.__events = {}))[name];

            if (!eventList || !eventList.length) {
                return this;
            }

            emit(eventList, fastSlice(arguments, 1));

            return this;
        };

        EventEmitter.prototype.emitArgs = function(name, args) {
            var eventList = (this.__events || (this.__events = {}))[name];

            if (!eventList || !eventList.length) {
                return this;
            }

            emit(eventList, args);

            return this;
        };

        function emitAsync(eventList, args, callback) {
            var length = eventList.length,
                index = 0,
                called = false;

            function next(err) {
                if (called === true) {
                    return;
                }
                if (err || index === length) {
                    called = true;
                    callback(err);
                    return;
                }

                eventList[index++].apply(null, args);
            }

            args[args.length] = next;
            next();
        }

        EventEmitter.prototype.emitAsync = function(name, args, callback) {
            var eventList = (this.__events || (this.__events = {}))[name];

            args = fastSlice(arguments, 1);
            callback = args.pop();

            if (!isFunction(callback)) {
                throw new TypeError("EventEmitter.emitAsync(name [, ...args], callback) callback must be a function");
            }

            if (!eventList || !eventList.length) {
                callback();
            } else {
                emitAsync(eventList, args, callback);
            }

            return this;
        };

        EventEmitter.prototype.listeners = function(name) {
            var eventList = (this.__events || (this.__events = {}))[name];

            return eventList ? fastSlice(eventList) : [];
        };

        EventEmitter.prototype.listenerCount = function(name) {
            var eventList = (this.__events || (this.__events = {}))[name];

            return eventList ? eventList.length : 0;
        };

        EventEmitter.prototype.setMaxListeners = function(value) {
            if ((value = +value) !== value) {
                throw new TypeError("EventEmitter.setMaxListeners(value) value must be a number");
            }

            this.__maxListeners = value < 0 ? -1 : value;
            return this;
        };


        EventEmitter.defaultMaxListeners = 10;

        EventEmitter.listeners = function(obj, name) {
            var eventList;

            if (obj == null) {
                throw new TypeError("EventEmitter.listeners(obj, name) obj required");
            }
            eventList = obj.__events && obj.__events[name];

            return eventList ? fastSlice(eventList) : [];
        };

        EventEmitter.listenerCount = function(obj, name) {
            var eventList;

            if (obj == null) {
                throw new TypeError("EventEmitter.listenerCount(obj, name) obj required");
            }
            eventList = obj.__events && obj.__events[name];

            return eventList ? eventList.length : 0;
        };

        EventEmitter.setMaxListeners = function(value) {
            if ((value = +value) !== value) {
                throw new TypeError("EventEmitter.setMaxListeners(value) value must be a number");
            }

            EventEmitter.defaultMaxListeners = value < 0 ? -1 : value;
            return value;
        };

        EventEmitter.extend = function(child) {

            inherits(child, this);
            child.extend = this.extend;

            return child;
        };


        module.exports = EventEmitter;


    },
    function(require, exports, module, global) {

        var create = require(17),
            extend = require(18),
            mixin = require(19);


        module.exports = function inherits(child, parent) {

            mixin(child, parent);
            child.prototype = extend(create(parent.prototype), child.prototype);
            child.prototype.constructor = child;
            child.__super = parent.prototype;

            return child;
        };


    },
    function(require, exports, module, global) {

        module.exports = Object.create || (function() {
            function F() {}
            return function create(object) {
                F.prototype = object;
                return new F();
            };
        }());


    },
    function(require, exports, module, global) {

        var keys = require(3);


        function baseExtend(a, b) {
            var objectKeys = keys(b),
                i = -1,
                il = objectKeys.length - 1,
                key;

            while (i++ < il) {
                key = objectKeys[i];
                a[key] = b[key];
            }
        }

        module.exports = function extend(out) {
            var i = 0,
                il = arguments.length - 1;

            while (i++ < il) {
                baseExtend(out, arguments[i]);
            }

            return out;
        };


    },
    function(require, exports, module, global) {

        var keys = require(3),
            isNullOrUndefined = require(20);


        function baseMixin(a, b) {
            var objectKeys = keys(b),
                i = -1,
                il = objectKeys.length - 1,
                key, value;

            while (i++ < il) {
                key = objectKeys[i];

                if (isNullOrUndefined(a[key]) && !isNullOrUndefined((value = b[key]))) {
                    a[key] = value;
                }
            }
        }

        module.exports = function mixin(out) {
            var i = 0,
                il = arguments.length - 1;

            while (i++ < il) {
                baseMixin(out, arguments[i]);
            }

            return out;
        };


    },
    function(require, exports, module, global) {

        module.exports = function isNullOrUndefined(obj) {
            return obj === null || obj === void 0;
        };


    },
    function(require, exports, module, global) {

        module.exports = function fastSlice(array, offset) {
            var length, i, il, result, j;

            offset = offset || 0;

            length = array.length;
            i = offset - 1;
            il = length - 1;
            result = new Array(length - offset);
            j = 0;

            while (i++ < il) {
                result[j++] = array[i];
            }

            return result;
        };


    },
    function(require, exports, module, global) {

        var process = require(13);
        var isObject = require(7),
            isFunction = require(6),
            environment = require(10),
            eventTable = require(23);


        var eventListener = module.exports,

            reSpliter = /[\s]+/,

            window = environment.window,
            document = environment.document,

            listenToEvent, captureEvent, removeEvent, dispatchEvent;


        window.Event = window.Event || function EmptyEvent() {};


        eventListener.on = function(target, eventType, callback) {
            var eventTypes = eventType.split(reSpliter),
                i = eventTypes.length;

            while (i--) {
                listenToEvent(target, eventTypes[i], callback);
            }
        };

        eventListener.capture = function(target, eventType, callback) {
            var eventTypes = eventType.split(reSpliter),
                i = eventTypes.length;

            while (i--) {
                captureEvent(target, eventTypes[i], callback);
            }
        };

        eventListener.off = function(target, eventType, callback) {
            var eventTypes = eventType.split(reSpliter),
                i = eventTypes.length;

            while (i--) {
                removeEvent(target, eventTypes[i], callback);
            }
        };

        eventListener.emit = function(target, eventType, event) {

            return dispatchEvent(target, eventType, isObject(event) ? event : {});
        };

        eventListener.getEventConstructor = function(target, eventType) {
            var getter = eventTable[eventType];
            return isFunction(getter) ? getter(target) : window.Event;
        };


        if (isFunction(document.addEventListener)) {

            listenToEvent = function(target, eventType, callback) {

                target.addEventListener(eventType, callback, false);
            };

            captureEvent = function(target, eventType, callback) {

                target.addEventListener(eventType, callback, true);
            };

            removeEvent = function(target, eventType, callback) {

                target.removeEventListener(eventType, callback, false);
            };

            dispatchEvent = function(target, eventType, event) {
                var getter = eventTable[eventType],
                    EventType = isFunction(getter) ? getter(target) : window.Event;

                return !!target.dispatchEvent(new EventType(eventType, event));
            };
        } else if (isFunction(document.attachEvent)) {

            listenToEvent = function(target, eventType, callback) {

                target.attachEvent("on" + eventType, callback);
            };

            captureEvent = function() {
                if (process.env.NODE_ENV === "development") {
                    throw new Error(
                        "Attempted to listen to events during the capture phase on a " +
                        "browser that does not support the capture phase. Your application " +
                        "will not receive some events."
                    );
                }
            };

            removeEvent = function(target, eventType, callback) {

                target.detachEvent("on" + eventType, callback);
            };

            dispatchEvent = function(target, eventType, event) {
                var doc = target.ownerDocument || document;

                return !!target.fireEvent("on" + eventType, doc.createEventObject(event));
            };
        } else {

            listenToEvent = function(target, eventType, callback) {

                target["on" + eventType] = callback;
                return target;
            };

            captureEvent = function() {
                if (process.env.NODE_ENV === "development") {
                    throw new Error(
                        "Attempted to listen to events during the capture phase on a " +
                        "browser that does not support the capture phase. Your application " +
                        "will not receive some events."
                    );
                }
            };

            removeEvent = function(target, eventType) {

                target["on" + eventType] = null;
                return true;
            };

            dispatchEvent = function(target, eventType, event) {
                var onType = "on" + eventType;

                if (isFunction(target[onType])) {
                    event.type = eventType;
                    return !!target[onType](event);
                }

                return false;
            };
        }


    },
    function(require, exports, module, global) {

        var isNode = require(24),
            environment = require(10);


        var window = environment.window,

            XMLHttpRequest = window.XMLHttpRequest,
            OfflineAudioContext = window.OfflineAudioContext;


        function returnEvent() {
            return window.Event;
        }


        module.exports = {
            abort: function(target) {
                if (XMLHttpRequest && target instanceof XMLHttpRequest) {
                    return window.ProgressEvent || window.Event;
                } else {
                    return window.UIEvent || window.Event;
                }
            },

            afterprint: returnEvent,

            animationend: function() {
                return window.AnimationEvent || window.Event;
            },
            animationiteration: function() {
                return window.AnimationEvent || window.Event;
            },
            animationstart: function() {
                return window.AnimationEvent || window.Event;
            },

            audioprocess: function() {
                return window.AudioProcessingEvent || window.Event;
            },

            beforeprint: returnEvent,
            beforeunload: function() {
                return window.BeforeUnloadEvent || window.Event;
            },
            beginevent: function() {
                return window.TimeEvent || window.Event;
            },

            blocked: returnEvent,
            blur: function() {
                return window.FocusEvent || window.Event;
            },

            cached: returnEvent,
            canplay: returnEvent,
            canplaythrough: returnEvent,
            chargingchange: returnEvent,
            chargingtimechange: returnEvent,
            checking: returnEvent,

            click: function() {
                return window.MouseEvent || window.Event;
            },

            close: returnEvent,
            compassneedscalibration: function() {
                return window.SensorEvent || window.Event;
            },
            complete: function(target) {
                if (OfflineAudioContext && target instanceof OfflineAudioContext) {
                    return window.OfflineAudioCompletionEvent || window.Event;
                } else {
                    return window.Event;
                }
            },

            compositionend: function() {
                return window.CompositionEvent || window.Event;
            },
            compositionstart: function() {
                return window.CompositionEvent || window.Event;
            },
            compositionupdate: function() {
                return window.CompositionEvent || window.Event;
            },

            contextmenu: function() {
                return window.MouseEvent || window.Event;
            },
            copy: function() {
                return window.ClipboardEvent || window.Event;
            },
            cut: function() {
                return window.ClipboardEvent || window.Event;
            },

            dblclick: function() {
                return window.MouseEvent || window.Event;
            },
            devicelight: function() {
                return window.DeviceLightEvent || window.Event;
            },
            devicemotion: function() {
                return window.DeviceMotionEvent || window.Event;
            },
            deviceorientation: function() {
                return window.DeviceOrientationEvent || window.Event;
            },
            deviceproximity: function() {
                return window.DeviceProximityEvent || window.Event;
            },

            dischargingtimechange: returnEvent,

            DOMActivate: function() {
                return window.UIEvent || window.Event;
            },
            DOMAttributeNameChanged: function() {
                return window.MutationNameEvent || window.Event;
            },
            DOMAttrModified: function() {
                return window.MutationEvent || window.Event;
            },
            DOMCharacterDataModified: function() {
                return window.MutationEvent || window.Event;
            },
            DOMContentLoaded: returnEvent,
            DOMElementNameChanged: function() {
                return window.MutationNameEvent || window.Event;
            },
            DOMFocusIn: function() {
                return window.FocusEvent || window.Event;
            },
            DOMFocusOut: function() {
                return window.FocusEvent || window.Event;
            },
            DOMNodeInserted: function() {
                return window.MutationEvent || window.Event;
            },
            DOMNodeInsertedIntoDocument: function() {
                return window.MutationEvent || window.Event;
            },
            DOMNodeRemoved: function() {
                return window.MutationEvent || window.Event;
            },
            DOMNodeRemovedFromDocument: function() {
                return window.MutationEvent || window.Event;
            },
            DOMSubtreeModified: function() {
                return window.FocusEvent || window.Event;
            },
            downloading: returnEvent,

            drag: function() {
                return window.DragEvent || window.Event;
            },
            dragend: function() {
                return window.DragEvent || window.Event;
            },
            dragenter: function() {
                return window.DragEvent || window.Event;
            },
            dragleave: function() {
                return window.DragEvent || window.Event;
            },
            dragover: function() {
                return window.DragEvent || window.Event;
            },
            dragstart: function() {
                return window.DragEvent || window.Event;
            },
            drop: function() {
                return window.DragEvent || window.Event;
            },

            durationchange: returnEvent,
            ended: returnEvent,

            endEvent: function() {
                return window.TimeEvent || window.Event;
            },
            error: function(target) {
                if (XMLHttpRequest && target instanceof XMLHttpRequest) {
                    return window.ProgressEvent || window.Event;
                } else if (isNode(target)) {
                    return window.UIEvent || window.Event;
                } else {
                    return window.Event;
                }
            },
            focus: function() {
                return window.FocusEvent || window.Event;
            },
            focusin: function() {
                return window.FocusEvent || window.Event;
            },
            focusout: function() {
                return window.FocusEvent || window.Event;
            },

            fullscreenchange: returnEvent,
            fullscreenerror: returnEvent,

            gamepadconnected: function() {
                return window.GamepadEvent || window.Event;
            },
            gamepaddisconnected: function() {
                return window.GamepadEvent || window.Event;
            },

            hashchange: function() {
                return window.HashChangeEvent || window.Event;
            },

            input: returnEvent,
            invalid: returnEvent,

            keydown: function() {
                return window.KeyboardEvent || window.Event;
            },
            keyup: function() {
                return window.KeyboardEvent || window.Event;
            },
            keypress: function() {
                return window.KeyboardEvent || window.Event;
            },

            languagechange: returnEvent,
            levelchange: returnEvent,

            load: function(target) {
                if (XMLHttpRequest && target instanceof XMLHttpRequest) {
                    return window.ProgressEvent || window.Event;
                } else {
                    return window.UIEvent || window.Event;
                }
            },

            loadeddata: returnEvent,
            loadedmetadata: returnEvent,

            loadend: function() {
                return window.ProgressEvent || window.Event;
            },
            loadstart: function() {
                return window.ProgressEvent || window.Event;
            },

            message: function() {
                return window.MessageEvent || window.Event;
            },

            mousedown: function() {
                return window.MouseEvent || window.Event;
            },
            mouseenter: function() {
                return window.MouseEvent || window.Event;
            },
            mouseleave: function() {
                return window.MouseEvent || window.Event;
            },
            mousemove: function() {
                return window.MouseEvent || window.Event;
            },
            mouseout: function() {
                return window.MouseEvent || window.Event;
            },
            mouseover: function() {
                return window.MouseEvent || window.Event;
            },
            mouseup: function() {
                return window.MouseEvent || window.Event;
            },

            noupdate: returnEvent,
            obsolete: returnEvent,
            offline: returnEvent,
            online: returnEvent,
            open: returnEvent,
            orientationchange: returnEvent,

            pagehide: function() {
                return window.PageTransitionEvent || window.Event;
            },
            pageshow: function() {
                return window.PageTransitionEvent || window.Event;
            },

            paste: function() {
                return window.ClipboardEvent || window.Event;
            },
            pause: returnEvent,
            pointerlockchange: returnEvent,
            pointerlockerror: returnEvent,
            play: returnEvent,
            playing: returnEvent,

            popstate: function() {
                return window.PopStateEvent || window.Event;
            },
            progress: function() {
                return window.ProgressEvent || window.Event;
            },

            ratechange: returnEvent,
            readystatechange: returnEvent,

            repeatevent: function() {
                return window.TimeEvent || window.Event;
            },

            reset: returnEvent,

            resize: function() {
                return window.UIEvent || window.Event;
            },
            scroll: function() {
                return window.UIEvent || window.Event;
            },

            seeked: returnEvent,
            seeking: returnEvent,

            select: function() {
                return window.UIEvent || window.Event;
            },
            show: function() {
                return window.MouseEvent || window.Event;
            },
            stalled: returnEvent,
            storage: function() {
                return window.StorageEvent || window.Event;
            },
            submit: returnEvent,
            success: returnEvent,
            suspend: returnEvent,

            SVGAbort: function() {
                return window.SVGEvent || window.Event;
            },
            SVGError: function() {
                return window.SVGEvent || window.Event;
            },
            SVGLoad: function() {
                return window.SVGEvent || window.Event;
            },
            SVGResize: function() {
                return window.SVGEvent || window.Event;
            },
            SVGScroll: function() {
                return window.SVGEvent || window.Event;
            },
            SVGUnload: function() {
                return window.SVGEvent || window.Event;
            },
            SVGZoom: function() {
                return window.SVGEvent || window.Event;
            },
            timeout: function() {
                return window.ProgressEvent || window.Event;
            },

            timeupdate: returnEvent,

            touchcancel: function() {
                return window.TouchEvent || window.Event;
            },
            touchend: function() {
                return window.TouchEvent || window.Event;
            },
            touchenter: function() {
                return window.TouchEvent || window.Event;
            },
            touchleave: function() {
                return window.TouchEvent || window.Event;
            },
            touchmove: function() {
                return window.TouchEvent || window.Event;
            },
            touchstart: function() {
                return window.TouchEvent || window.Event;
            },

            transitionend: function() {
                return window.TransitionEvent || window.Event;
            },
            unload: function() {
                return window.UIEvent || window.Event;
            },

            updateready: returnEvent,
            upgradeneeded: returnEvent,

            userproximity: function() {
                return window.SensorEvent || window.Event;
            },

            visibilitychange: returnEvent,
            volumechange: returnEvent,
            waiting: returnEvent,

            wheel: function() {
                return window.WheelEvent || window.Event;
            }
        };


    },
    function(require, exports, module, global) {

        var isNode;


        if (typeof(Node) !== "undefined") {
            isNode = function isNode(obj) {
                return obj instanceof Node;
            };
        } else {
            isNode = function isNode(obj) {
                return (
                    typeof(obj) === "object" &&
                    typeof(obj.nodeType) === "number" &&
                    typeof(obj.nodeName) === "string"
                );
            };
        }


        module.exports = isNode;


    },
    function(require, exports, module, global) {

        var mathf = require(2),
            vec3 = require(8);


        var color = module.exports;


        color.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : mathf.ArrayType;


        color.create = function(r, g, b) {
            var out = new color.ArrayType(3);

            out[0] = r !== undefined ? r : 0;
            out[1] = g !== undefined ? g : 0;
            out[2] = b !== undefined ? b : 0;

            return out;
        };

        color.copy = vec3.copy;

        color.clone = vec3.clone;

        color.setRGB = vec3.set;

        color.add = vec3.add;
        color.sub = vec3.sub;

        color.mul = vec3.mul;
        color.div = vec3.div;

        color.sadd = vec3.sadd;
        color.ssub = vec3.ssub;

        color.smul = vec3.smul;
        color.sdiv = vec3.sdiv;

        color.lengthSqValues = vec3.lengthSqValues;

        color.lengthValues = vec3.lengthValues;

        color.invLengthValues = vec3.invLengthValues;

        color.dot = vec3.dot;

        color.lengthSq = vec3.lengthSq;

        color.length = vec3.length;

        color.invLength = vec3.invLength;

        color.setLength = vec3.setLength;

        color.normalize = vec3.normalize;

        color.lerp = vec3.lerp;

        color.min = vec3.min;

        color.max = vec3.max;

        color.clamp = vec3.clamp;

        color.equal = vec3.equal;

        color.notEqual = vec3.notEqual;


        var cmin = color.create(0, 0, 0),
            cmax = color.create(1, 1, 1);

        color.cnormalize = function(out) {

            return color.clamp(out, out, cmin, cmax);
        };

        color.str = function(out) {

            return "Color(" + out[0] + ", " + out[1] + ", " + out[2] + ", " + out[3] + ")";
        };

        color.set = function(out, r, g, b) {
            var type = typeof(r);

            if (type === "number") {
                out[0] = r !== undefined ? r : 0;
                out[1] = g !== undefined ? g : 0;
                out[2] = b !== undefined ? b : 0;
            } else if (type === "string") {
                color.setStyle(out, r);
            } else if (r.length === +r.length) {
                out[0] = r[0] || 0;
                out[1] = r[1] || 0;
                out[2] = r[2] || 0;
            }

            return out;
        };

        var rgb255 = /^rgb\((\d+),(\d+),(\d+)\)$/i,
            rgb100 = /^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i,
            hex6 = /^\#([0.0-9a-f]{6})$/i,
            hex3 = /^\#([0.0-9a-f])([0.0-9a-f])([0.0-9a-f])$/i,
            hex3to6 = /#(.)(.)(.)/,
            hex3to6String = "#$1$1$2$2$3$3",
            colorName = /^(\w+)$/i,
            inv255 = 1 / 255,
            inv100 = 1 / 100;

        color.setStyle = function(out, style) {
            var color;

            if (rgb255.test(style)) {
                color = rgb255.exec(style);

                out[0] = min(255, Number(color[1])) * inv255;
                out[1] = min(255, Number(color[2])) * inv255;
                out[2] = min(255, Number(color[3])) * inv255;
            } else if (rgb100.test(style)) {
                color = rgb100.exec(style);

                out[0] = min(100, Number(color[1])) * inv100;
                out[1] = min(100, Number(color[2])) * inv100;
                out[2] = min(100, Number(color[3])) * inv100;
            } else if (hex6.test(style)) {

                out[0] = parseInt(style.substr(1, 2), 16) * inv255;
                out[1] = parseInt(style.substr(3, 2), 16) * inv255;
                out[2] = parseInt(style.substr(5, 2), 16) * inv255;
            } else if (hex3.test(style)) {
                style = style.replace(hex3to6, hex3to6String);

                out[0] = parseInt(style.substr(1, 2), 16) * inv255;
                out[1] = parseInt(style.substr(3, 2), 16) * inv255;
                out[2] = parseInt(style.substr(5, 2), 16) * inv255;
            } else if (colorName.test(style)) {
                style = colorNames[style.toLowerCase()];

                out[0] = parseInt(style.substr(1, 2), 16) * inv255;
                out[1] = parseInt(style.substr(3, 2), 16) * inv255;
                out[2] = parseInt(style.substr(5, 2), 16) * inv255;
            }

            return out;
        };

        var colorNames = color.colorNames = {
            aliceblue: "#f0f8ff",
            antiquewhite: "#faebd7",
            aqua: "#00ffff",
            aquamarine: "#7fffd4",
            azure: "#f0ffff",
            beige: "#f5f5dc",
            bisque: "#ffe4c4",
            black: "#000000",
            blanchedalmond: "#ffebcd",
            blue: "#0000ff",
            blueviolet: "#8a2be2",
            brown: "#a52a2a",
            burlywood: "#deb887",
            cadetblue: "#5f9ea0",
            chartreuse: "#7fff00",
            chocolate: "#d2691e",
            coral: "#ff7f50",
            cornflowerblue: "#6495ed",
            cornsilk: "#fff8dc",
            crimson: "#dc143c",
            cyan: "#00ffff",
            darkblue: "#00008b",
            darkcyan: "#008b8b",
            darkgoldenrod: "#b8860b",
            darkgray: "#a9a9a9",
            darkgreen: "#006400",
            darkkhaki: "#bdb76b",
            darkmagenta: "#8b008b",
            darkolivegreen: "#556b2f",
            darkorange: "#ff8c00",
            darkorchid: "#9932cc",
            darkred: "#8b0000",
            darksalmon: "#e9967a",
            darkseagreen: "#8fbc8f",
            darkslateblue: "#483d8b",
            darkslategray: "#2f4f4f",
            darkturquoise: "#00ced1",
            darkviolet: "#9400d3",
            deeppink: "#ff1493",
            deepskyblue: "#00bfff",
            dimgray: "#696969",
            dodgerblue: "#1e90ff",
            firebrick: "#b22222",
            floralwhite: "#fffaf0",
            forestgreen: "#228b22",
            fuchsia: "#ff00ff",
            gainsboro: "#dcdcdc",
            ghostwhite: "#f8f8ff",
            gold: "#ffd700",
            goldenrod: "#daa520",
            gray: "#808080",
            green: "#008000",
            greenyellow: "#adff2f",
            grey: "#808080",
            honeydew: "#f0fff0",
            hotpink: "#ff69b4",
            indianred: "#cd5c5c",
            indigo: "#4b0082",
            ivory: "#fffff0",
            khaki: "#f0e68c",
            lavender: "#e6e6fa",
            lavenderblush: "#fff0f5",
            lawngreen: "#7cfc00",
            lemonchiffon: "#fffacd",
            lightblue: "#add8e6",
            lightcoral: "#f08080",
            lightcyan: "#e0ffff",
            lightgoldenrodyellow: "#fafad2",
            lightgrey: "#d3d3d3",
            lightgreen: "#90ee90",
            lightpink: "#ffb6c1",
            lightsalmon: "#ffa07a",
            lightseagreen: "#20b2aa",
            lightskyblue: "#87cefa",
            lightslategray: "#778899",
            lightsteelblue: "#b0c4de",
            lightyellow: "#ffffe0",
            lime: "#00ff00",
            limegreen: "#32cd32",
            linen: "#faf0e6",
            magenta: "#ff00ff",
            maroon: "#800000",
            mediumaquamarine: "#66cdaa",
            mediumblue: "#0000cd",
            mediumorchid: "#ba55d3",
            mediumpurple: "#9370d8",
            mediumseagreen: "#3cb371",
            mediumslateblue: "#7b68ee",
            mediumspringgreen: "#00fa9a",
            mediumturquoise: "#48d1cc",
            mediumvioletred: "#c71585",
            midnightblue: "#191970",
            mintcream: "#f5fffa",
            mistyrose: "#ffe4e1",
            moccasin: "#ffe4b5",
            navajowhite: "#ffdead",
            navy: "#000080",
            oldlace: "#fdf5e6",
            olive: "#808000",
            olivedrab: "#6b8e23",
            orange: "#ffa500",
            orangered: "#ff4500",
            orchid: "#da70d6",
            palegoldenrod: "#eee8aa",
            palegreen: "#98fb98",
            paleturquoise: "#afeeee",
            palevioletred: "#d87093",
            papayawhip: "#ffefd5",
            peachpuff: "#ffdab9",
            peru: "#cd853f",
            pink: "#ffc0cb",
            plum: "#dda0dd",
            powderblue: "#b0e0e6",
            purple: "#800080",
            red: "#ff0000",
            rosybrown: "#bc8f8f",
            royalblue: "#4169e1",
            saddlebrown: "#8b4513",
            salmon: "#fa8072",
            sandybrown: "#f4a460",
            seagreen: "#2e8b57",
            seashell: "#fff5ee",
            sienna: "#a0522d",
            silver: "#c0c0c0",
            skyblue: "#87ceeb",
            slateblue: "#6a5acd",
            slategray: "#708090",
            snow: "#fffafa",
            springgreen: "#00ff7f",
            steelblue: "#4682b4",
            tan: "#d2b48c",
            teal: "#008080",
            thistle: "#d8bfd8",
            tomato: "#ff6347",
            turquoise: "#40e0d0",
            violet: "#ee82ee",
            wheat: "#f5deb3",
            white: "#ffffff",
            whitesmoke: "#f5f5f5",
            yellow: "#ffff00",
            yellowgreen: "#9acd32"
        };


    },
    function(require, exports, module, global) {

        var reverse = require(27);


        var enums = exports;


        enums.Blending = require(31);
        enums.CullFace = require(32);
        enums.Depth = require(34);
        enums.FilterMode = require(35);

        enums.gl = require(33);
        enums.glValues = reverse(enums.gl);

        enums.TextureFormat = require(36);
        enums.TextureType = require(37);
        enums.TextureWrap = require(38);


    },
    function(require, exports, module, global) {

        var keys = require(3),
            isArrayLike = require(28);


        function reverseArray(array) {
            var i = array.length,
                results = new Array(i),
                j = 0;

            while (i--) {
                results[j++] = array[i];
            }

            return results;
        }

        function reverseObject(object) {
            var objectKeys = keys(object),
                i = -1,
                il = objectKeys.length - 1,
                results = {},
                key;

            while (i++ < il) {
                key = objectKeys[i];
                results[object[key]] = key;
            }

            return results;
        }

        module.exports = function reverse(object) {
            return isArrayLike(object) ? reverseArray(object) : reverseObject(Object(object));
        };


    },
    function(require, exports, module, global) {

        var isLength = require(29),
            isObjectLike = require(30);


        var objectToString = Object.prototype.toString,
            objectArrayBufferString = "[object ArrayBuffer]",
            arrayLikeStrings = {
                "[object Array]": true,
                "[object Arguments]": true,
                "[object Float32Array]": true,
                "[object Float64Array]": true,
                "[object Int8Array]": true,
                "[object Int16Array]": true,
                "[object Int32Array]": true,
                "[object Uint8Array]": true,
                "[object Uint8ClampedArray]": true,
                "[object Uint16Array]": true,
                "[object Uint32Array]": true
            };


        arrayLikeStrings[objectArrayBufferString] = true;


        module.exports = function isArrayLike(obj) {
            var isObject = isObjectLike(obj),
                objectString = isObject && objectToString.call(obj);

            return isObject && (
                objectString !== objectArrayBufferString ? (
                    isLength(obj.length) && arrayLikeStrings[objectString]
                ) : true
            ) || false;
        };


    },
    function(require, exports, module, global) {

        var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;


        module.exports = function isLength(obj) {
            return typeof(obj) === "number" && obj > -1 && obj % 1 === 0 && obj <= MAX_SAFE_INTEGER;
        };


    },
    function(require, exports, module, global) {

        module.exports = function isObjectLike(obj) {
            return (obj && typeof(obj) === "object") || false;
        };


    },
    function(require, exports, module, global) {

        module.exports = {
            None: 1,
            Default: 2,
            Additive: 3,
            Subtractive: 4,
            Muliply: 5
        };


    },
    function(require, exports, module, global) {

        var gl = require(33);


        module.exports = {
            None: 1,
            Back: gl.BACK,
            Front: gl.FRONT,
            FrontAndBack: gl.FRONT_AND_BACK
        };


    },
    function(require, exports, module, global) {

        module.exports = {
            ACTIVE_ATTRIBUTES: 35721,
            ACTIVE_TEXTURE: 34016,
            ACTIVE_UNIFORMS: 35718,
            ALIASED_LINE_WIDTH_RANGE: 33902,
            ALIASED_POINT_SIZE_RANGE: 33901,
            ALPHA: 6406,
            ALPHA_BITS: 3413,
            ALWAYS: 519,
            ARRAY_BUFFER: 34962,
            ARRAY_BUFFER_BINDING: 34964,
            ATTACHED_SHADERS: 35717,
            BACK: 1029,
            BLEND: 3042,
            BLEND_COLOR: 32773,
            BLEND_DST_ALPHA: 32970,
            BLEND_DST_RGB: 32968,
            BLEND_EQUATION: 32777,
            BLEND_EQUATION_ALPHA: 34877,
            BLEND_EQUATION_RGB: 32777,
            BLEND_SRC_ALPHA: 32971,
            BLEND_SRC_RGB: 32969,
            BLUE_BITS: 3412,
            BOOL: 35670,
            BOOL_VEC2: 35671,
            BOOL_VEC3: 35672,
            BOOL_VEC4: 35673,
            BROWSER_DEFAULT_WEBGL: 37444,
            BUFFER_SIZE: 34660,
            BUFFER_USAGE: 34661,
            BYTE: 5120,
            CCW: 2305,
            CLAMP_TO_EDGE: 33071,
            COLOR_ATTACHMENT0: 36064,
            COLOR_BUFFER_BIT: 16384,
            COLOR_CLEAR_VALUE: 3106,
            COLOR_WRITEMASK: 3107,
            COMPILE_STATUS: 35713,
            COMPRESSED_TEXTURE_FORMATS: 34467,
            CONSTANT_ALPHA: 32771,
            CONSTANT_COLOR: 32769,
            CONTEXT_LOST_WEBGL: 37442,
            CULL_FACE: 2884,
            CULL_FACE_MODE: 2885,
            CURRENT_PROGRAM: 35725,
            CURRENT_VERTEX_ATTRIB: 34342,
            CW: 2304,
            DECR: 7683,
            DECR_WRAP: 34056,
            DELETE_STATUS: 35712,
            DEPTH_ATTACHMENT: 36096,
            DEPTH_BITS: 3414,
            DEPTH_BUFFER_BIT: 256,
            DEPTH_CLEAR_VALUE: 2931,
            DEPTH_COMPONENT: 6402,
            DEPTH_COMPONENT16: 33189,
            DEPTH_FUNC: 2932,
            DEPTH_RANGE: 2928,
            DEPTH_STENCIL: 34041,
            DEPTH_STENCIL_ATTACHMENT: 33306,
            DEPTH_TEST: 2929,
            DEPTH_WRITEMASK: 2930,
            DITHER: 3024,
            DONT_CARE: 4352,
            DST_ALPHA: 772,
            DST_COLOR: 774,
            DYNAMIC_DRAW: 35048,
            ELEMENT_ARRAY_BUFFER: 34963,
            ELEMENT_ARRAY_BUFFER_BINDING: 34965,
            EQUAL: 514,
            FASTEST: 4353,
            FLOAT: 5126,
            FLOAT_MAT2: 35674,
            FLOAT_MAT3: 35675,
            FLOAT_MAT4: 35676,
            FLOAT_VEC2: 35664,
            FLOAT_VEC3: 35665,
            FLOAT_VEC4: 35666,
            FRAGMENT_SHADER: 35632,
            FRAMEBUFFER: 36160,
            FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049,
            FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048,
            FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051,
            FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050,
            FRAMEBUFFER_BINDING: 36006,
            FRAMEBUFFER_COMPLETE: 36053,
            FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054,
            FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057,
            FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055,
            FRAMEBUFFER_UNSUPPORTED: 36061,
            FRONT: 1028,
            FRONT_AND_BACK: 1032,
            FRONT_FACE: 2886,
            FUNC_ADD: 32774,
            FUNC_REVERSE_SUBTRACT: 32779,
            FUNC_SUBTRACT: 32778,
            GENERATE_MIPMAP_HINT: 33170,
            GEQUAL: 518,
            GREATER: 516,
            GREEN_BITS: 3411,
            HIGH_FLOAT: 36338,
            HIGH_INT: 36341,
            IMPLEMENTATION_COLOR_READ_FORMAT: 35739,
            IMPLEMENTATION_COLOR_READ_TYPE: 35738,
            INCR: 7682,
            INCR_WRAP: 34055,
            INT: 5124,
            INT_VEC2: 35667,
            INT_VEC3: 35668,
            INT_VEC4: 35669,
            INVALID_ENUM: 1280,
            INVALID_FRAMEBUFFER_OPERATION: 1286,
            INVALID_OPERATION: 1282,
            INVALID_VALUE: 1281,
            INVERT: 5386,
            KEEP: 7680,
            LEQUAL: 515,
            LESS: 513,
            LINEAR: 9729,
            LINEAR_MIPMAP_LINEAR: 9987,
            LINEAR_MIPMAP_NEAREST: 9985,
            LINES: 1,
            LINE_LOOP: 2,
            LINE_STRIP: 3,
            LINE_WIDTH: 2849,
            LINK_STATUS: 35714,
            LOW_FLOAT: 36336,
            LOW_INT: 36339,
            LUMINANCE: 6409,
            LUMINANCE_ALPHA: 6410,
            MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661,
            MAX_CUBE_MAP_TEXTURE_SIZE: 34076,
            MAX_FRAGMENT_UNIFORM_VECTORS: 36349,
            MAX_RENDERBUFFER_SIZE: 34024,
            MAX_TEXTURE_IMAGE_UNITS: 34930,
            MAX_TEXTURE_SIZE: 3379,
            MAX_VARYING_VECTORS: 36348,
            MAX_VERTEX_ATTRIBS: 34921,
            MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660,
            MAX_VERTEX_UNIFORM_VECTORS: 36347,
            MAX_VIEWPORT_DIMS: 3386,
            MEDIUM_FLOAT: 36337,
            MEDIUM_INT: 36340,
            MIRRORED_REPEAT: 33648,
            NEAREST: 9728,
            NEAREST_MIPMAP_LINEAR: 9986,
            NEAREST_MIPMAP_NEAREST: 9984,
            NEVER: 512,
            NICEST: 4354,
            NONE: 0,
            NOTEQUAL: 517,
            NO_ERROR: 0,
            ONE: 1,
            ONE_MINUS_CONSTANT_ALPHA: 32772,
            ONE_MINUS_CONSTANT_COLOR: 32770,
            ONE_MINUS_DST_ALPHA: 773,
            ONE_MINUS_DST_COLOR: 775,
            ONE_MINUS_SRC_ALPHA: 771,
            ONE_MINUS_SRC_COLOR: 769,
            OUT_OF_MEMORY: 1285,
            PACK_ALIGNMENT: 3333,
            POINTS: 0,
            POLYGON_OFFSET_FACTOR: 32824,
            POLYGON_OFFSET_FILL: 32823,
            POLYGON_OFFSET_UNITS: 10752,
            RED_BITS: 3410,
            RENDERBUFFER: 36161,
            RENDERBUFFER_ALPHA_SIZE: 36179,
            RENDERBUFFER_BINDING: 36007,
            RENDERBUFFER_BLUE_SIZE: 36178,
            RENDERBUFFER_DEPTH_SIZE: 36180,
            RENDERBUFFER_GREEN_SIZE: 36177,
            RENDERBUFFER_HEIGHT: 36163,
            RENDERBUFFER_INTERNAL_FORMAT: 36164,
            RENDERBUFFER_RED_SIZE: 36176,
            RENDERBUFFER_STENCIL_SIZE: 36181,
            RENDERBUFFER_WIDTH: 36162,
            RENDERER: 7937,
            REPEAT: 10497,
            REPLACE: 7681,
            RGB: 6407,
            RGB5_A1: 32855,
            RGB565: 36194,
            RGBA: 6408,
            RGBA4: 32854,
            SAMPLER_2D: 35678,
            SAMPLER_CUBE: 35680,
            SAMPLES: 32937,
            SAMPLE_ALPHA_TO_COVERAGE: 32926,
            SAMPLE_BUFFERS: 32936,
            SAMPLE_COVERAGE: 32928,
            SAMPLE_COVERAGE_INVERT: 32939,
            SAMPLE_COVERAGE_VALUE: 32938,
            SCISSOR_BOX: 3088,
            SCISSOR_TEST: 3089,
            SHADER_TYPE: 35663,
            SHADING_LANGUAGE_VERSION: 35724,
            SHORT: 5122,
            SRC_ALPHA: 770,
            SRC_ALPHA_SATURATE: 776,
            SRC_COLOR: 768,
            STATIC_DRAW: 35044,
            STENCIL_ATTACHMENT: 36128,
            STENCIL_BACK_FAIL: 34817,
            STENCIL_BACK_FUNC: 34816,
            STENCIL_BACK_PASS_DEPTH_FAIL: 34818,
            STENCIL_BACK_PASS_DEPTH_PASS: 34819,
            STENCIL_BACK_REF: 36003,
            STENCIL_BACK_VALUE_MASK: 36004,
            STENCIL_BACK_WRITEMASK: 36005,
            STENCIL_BITS: 3415,
            STENCIL_BUFFER_BIT: 1024,
            STENCIL_CLEAR_VALUE: 2961,
            STENCIL_FAIL: 2964,
            STENCIL_FUNC: 2962,
            STENCIL_INDEX: 6401,
            STENCIL_INDEX8: 36168,
            STENCIL_PASS_DEPTH_FAIL: 2965,
            STENCIL_PASS_DEPTH_PASS: 2966,
            STENCIL_REF: 2967,
            STENCIL_TEST: 2960,
            STENCIL_VALUE_MASK: 2963,
            STENCIL_WRITEMASK: 2968,
            STREAM_DRAW: 35040,
            SUBPIXEL_BITS: 3408,
            TEXTURE: 5890,
            TEXTURE0: 33984,
            TEXTURE1: 33985,
            TEXTURE2: 33986,
            TEXTURE3: 33987,
            TEXTURE4: 33988,
            TEXTURE5: 33989,
            TEXTURE6: 33990,
            TEXTURE7: 33991,
            TEXTURE8: 33992,
            TEXTURE9: 33993,
            TEXTURE10: 33994,
            TEXTURE11: 33995,
            TEXTURE12: 33996,
            TEXTURE13: 33997,
            TEXTURE14: 33998,
            TEXTURE15: 33999,
            TEXTURE16: 34000,
            TEXTURE17: 34001,
            TEXTURE18: 34002,
            TEXTURE19: 34003,
            TEXTURE20: 34004,
            TEXTURE21: 34005,
            TEXTURE22: 34006,
            TEXTURE23: 34007,
            TEXTURE24: 34008,
            TEXTURE25: 34009,
            TEXTURE26: 34010,
            TEXTURE27: 34011,
            TEXTURE28: 34012,
            TEXTURE29: 34013,
            TEXTURE30: 34014,
            TEXTURE31: 34015,
            TEXTURE_2D: 3553,
            TEXTURE_BINDING_2D: 32873,
            TEXTURE_BINDING_CUBE_MAP: 34068,
            TEXTURE_CUBE_MAP: 34067,
            TEXTURE_CUBE_MAP_NEGATIVE_X: 34070,
            TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072,
            TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074,
            TEXTURE_CUBE_MAP_POSITIVE_X: 34069,
            TEXTURE_CUBE_MAP_POSITIVE_Y: 34071,
            TEXTURE_CUBE_MAP_POSITIVE_Z: 34073,
            TEXTURE_MAG_FILTER: 10240,
            TEXTURE_MIN_FILTER: 10241,
            TEXTURE_WRAP_S: 10242,
            TEXTURE_WRAP_T: 10243,
            TRIANGLES: 4,
            TRIANGLE_FAN: 6,
            TRIANGLE_STRIP: 5,
            UNPACK_ALIGNMENT: 3317,
            UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443,
            UNPACK_FLIP_Y_WEBGL: 37440,
            UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441,
            UNSIGNED_BYTE: 5121,
            UNSIGNED_INT: 5125,
            UNSIGNED_SHORT: 5123,
            UNSIGNED_SHORT_4_4_4_4: 32819,
            UNSIGNED_SHORT_5_5_5_1: 32820,
            UNSIGNED_SHORT_5_6_5: 33635,
            VALIDATE_STATUS: 35715,
            VENDOR: 7936,
            VERSION: 7938,
            VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975,
            VERTEX_ATTRIB_ARRAY_ENABLED: 34338,
            VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922,
            VERTEX_ATTRIB_ARRAY_POINTER: 34373,
            VERTEX_ATTRIB_ARRAY_SIZE: 34339,
            VERTEX_ATTRIB_ARRAY_STRIDE: 34340,
            VERTEX_ATTRIB_ARRAY_TYPE: 34341,
            VERTEX_SHADER: 35633,
            VIEWPORT: 2978,
            ZERO: 0
        };


    },
    function(require, exports, module, global) {

        var gl = require(33);


        module.exports = {
            None: 1,
            Never: gl.NEVER,
            Less: gl.LESS,
            Equal: gl.EQUAL,
            LessThenOrEqual: gl.LEQUAL,
            Greater: gl.GREATER,
            NotEqual: gl.NOTEQUAL,
            GreaterThanOrEqual: gl.GEQUAL,
            Always: gl.ALWAYS
        };


    },
    function(require, exports, module, global) {

        module.exports = {
            None: 1,
            Linear: 2
        };


    },
    function(require, exports, module, global) {

        var gl = require(33);


        module.exports = {
            RGB: gl.RGB,
            RGBA: gl.RGBA,
            Alpha: gl.ALPHA,
            Luminance: gl.LUMINANCE,
            LuminanceAlpha: gl.LUMINANCE_ALPHA
        };


    },
    function(require, exports, module, global) {

        var gl = require(33);


        module.exports = {
            UnsignedByte: gl.UNSIGNED_BYTE,
            Float: gl.FLOAT,
            DepthComponent: gl.DEPTH_COMPONENT,
            UnsignedShort: gl.UNSIGNED_SHORT,
            UnsignedShort565: gl.UNSIGNED_SHORT_5_6_5,
            UnsignedShort4444: gl.UNSIGNED_SHORT_4_4_4_4,
            UnsignedShort5551: gl.UNSIGNED_SHORT_5_5_5_1
        };


    },
    function(require, exports, module, global) {

        var gl = require(33);


        module.exports = {
            Repeat: gl.REPEAT,
            Clamp: gl.CLAMP_TO_EDGE,
            MirrorRepeat: gl.MIRRORED_REPEAT
        };


    },
    function(require, exports, module, global) {

        module.exports = WebGLBuffer;


        function WebGLBuffer(context) {

            this.context = context;

            this.stride = 0;
            this.type = null;
            this.draw = null;
            this.length = null;
            this.glBuffer = null;
            this.needsCompile = true;
        }

        WebGLBuffer.prototype.compile = function(type, array, stride, draw) {
            var gl = this.context.gl,
                glBuffer = this.glBuffer || (this.glBuffer = gl.createBuffer());

            gl.bindBuffer(type, glBuffer);
            gl.bufferData(type, array, draw);

            this.type = type;
            this.stride = stride || 0;
            this.draw = draw;
            this.length = array.length;

            this.needsCompile = false;

            return this;
        };


    },
    function(require, exports, module, global) {

        var isArray = require(41),
            mathf = require(2),
            enums = require(26);


        var TextureType = enums.TextureType,
            FilterMode = enums.FilterMode;


        module.exports = WebGLTexture;


        function WebGLTexture(context, texture) {
            var _this = this;

            this.context = context;
            this.texture = texture;

            this.isCubeMap = false;
            this.needsCompile = true;
            this.glTexture = null;

            texture.on("update", function() {
                _this.needsCompile = true;
            });
        }

        WebGLTexture.prototype.getGLTexture = function() {
            if (this.needsCompile === false) {
                return this.glTexture;
            } else {
                return WebGLTexture_getGLTexture(this);
            }
        };

        function WebGLTexture_getGLTexture(_this) {
            var texture = _this.texture,

                context = _this.context,
                gl = context.gl,

                glTexture = _this.glTexture || (_this.glTexture = gl.createTexture()),

                image = texture.data,
                notNull = image != null,
                isCubeMap = isArray(image),

                width = texture.width,
                height = texture.height,
                isPOT = mathf.isPowerOfTwo(width) && mathf.isPowerOfTwo(height),

                generateMipmap = texture.generateMipmap,
                flipY = texture.flipY,
                premultiplyAlpha = texture.premultiplyAlpha,
                anisotropy = texture.anisotropy,
                filter = texture.filter,
                format = getFormat(gl, texture.format),
                wrap = isPOT ? getWrap(gl, texture.wrap) : gl.CLAMP_TO_EDGE,
                textureType = getType(gl, texture.type),

                TFA = (anisotropy > 0) && context.getExtension("EXT_texture_filter_anisotropic"),
                TEXTURE_TYPE = isCubeMap ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D,
                minFilter, magFilter, images, i, il;

            if (TFA) {
                anisotropy = mathf.clamp(anisotropy, 1, context.__maxAnisotropy);
            }

            if (notNull) {
                if (isCubeMap) {
                    images = [];
                    i = -1;
                    il = image.length - 1;

                    while (i++ < il) {
                        images[i] = context.clampMaxSize(image[i], isCubeMap);
                    }
                } else {
                    image = context.clampMaxSize(image, false);
                }
            }

            if (filter === FilterMode.None) {
                magFilter = gl.NEAREST;
                minFilter = isPOT && generateMipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.NEAREST;
            } else { //FilterMode.Linear
                magFilter = gl.LINEAR;
                minFilter = isPOT && generateMipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR;
            }

            if (
                (textureType === TextureType.Float && !context.getExtension("OES_texture_float")) ||
                (textureType === TextureType.DepthComponent && !context.getExtension("WEBGL_depth_texture"))
            ) {
                textureType = gl.UNSIGNED_BYTE;
            }

            gl.bindTexture(TEXTURE_TYPE, glTexture);

            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY ? 1 : 0);
            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha ? 1 : 0);

            if (notNull) {
                if (isCubeMap) {
                    i = images.length;
                    while (i--) {
                        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, format, format, textureType, images[i]);
                    }
                } else {
                    gl.texImage2D(TEXTURE_TYPE, 0, format, format, textureType, image);
                }
            } else {
                if (isCubeMap) {
                    i = image.length;
                    while (i--) {
                        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, format, width, height, 0, format, textureType, null);
                    }
                } else {
                    if (textureType === TextureType.DepthComponent) {
                        gl.texImage2D(TEXTURE_TYPE, 0, textureType, width, height, 0, textureType, gl.UNSIGNED_SHORT, null);
                    } else {
                        gl.texImage2D(TEXTURE_TYPE, 0, format, width, height, 0, format, textureType, null);
                    }
                }
            }

            gl.texParameteri(TEXTURE_TYPE, gl.TEXTURE_MAG_FILTER, magFilter);
            gl.texParameteri(TEXTURE_TYPE, gl.TEXTURE_MIN_FILTER, minFilter);

            gl.texParameteri(TEXTURE_TYPE, gl.TEXTURE_WRAP_S, wrap);
            gl.texParameteri(TEXTURE_TYPE, gl.TEXTURE_WRAP_T, wrap);

            if (TFA) {
                gl.texParameterf(TEXTURE_TYPE, TFA.TEXTURE_MAX_ANISOTROPY_EXT, anisotropy);
            }
            if (generateMipmap && isPOT) {
                gl.generateMipmap(TEXTURE_TYPE);
            }

            _this.isCubeMap = isCubeMap;
            _this.needsCompile = false;

            gl.bindTexture(TEXTURE_TYPE, null);

            return glTexture;
        }

        function getFormat(gl, format) {
            switch (format) {
                case gl.RGB:
                    return gl.RGB;
                case gl.ALPHA:
                    return gl.ALPHA;
                case gl.LUMINANCE:
                    return gl.LUMINANCE;
                case gl.LUMINANCE_ALPHA:
                    return gl.LUMINANCE_ALPHA;
                default:
                    return gl.RGBA;
            }
        }

        function getType(gl, type) {
            switch (type) {
                case gl.FLOAT:
                    return gl.FLOAT;
                case gl.DEPTH_COMPONENT:
                    return gl.DEPTH_COMPONENT;
                case gl.UNSIGNED_SHORT:
                    return gl.UNSIGNED_SHORT;
                case gl.UNSIGNED_SHORT_5_6_5:
                    return gl.UNSIGNED_SHORT_5_6_5;
                case gl.UNSIGNED_SHORT_4_4_4_4:
                    return gl.UNSIGNED_SHORT_4_4_4_4;
                case gl.UNSIGNED_SHORT_5_5_5_1:
                    return gl.UNSIGNED_SHORT_5_5_5_1;
                default:
                    return gl.UNSIGNED_BYTE;
            }
        }

        function getWrap(gl, wrap) {
            switch (wrap) {
                case gl.REPEAT:
                    return gl.REPEAT;
                case gl.MIRRORED_REPEAT:
                    return gl.MIRRORED_REPEAT;
                default:
                    return gl.CLAMP_TO_EDGE;
            }
        }


    },
    function(require, exports, module, global) {

        var isLength = require(29),
            isObjectLike = require(30);


        var objectArray = "[object Array]",
            toString = Object.prototype.toString;


        module.exports = Array.isArray || function isArray(obj) {
            return isObjectLike(obj) && isLength(obj.length) && toString.call(obj) === objectArray;
        };


    },
    function(require, exports, module, global) {

        var isArray = require(41),
            FastHash = require(43),

            enums = require(26),
            uniforms = require(47),
            attributes = require(67);


        module.exports = WebGLProgram;


        function WebGLProgram(context) {

            this.context = context;

            this.floatPrecision = context.__precision;
            this.intPrecision = context.__precision;

            this.uniforms = new FastHash("name");
            this.attributes = new FastHash("name");

            this.needsCompile = true;
            this.glProgram = null;
        }

        WebGLProgram.prototype.compile = function(vertex, fragment) {
            var context = this.context,
                floatPrecision = this.floatPrecision,
                intPrecision = this.intPrecision,
                uniforms = this.uniforms,
                attributes = this.attributes,
                gl = context.gl,
                glProgram = this.glProgram;

            if (glProgram) {
                uniforms.clear();
                attributes.clear();
                gl.deleteProgram(glProgram);
            }

            glProgram = this.glProgram = createProgram(
                gl,
                prependPrecision(floatPrecision, intPrecision, vertex),
                prependPrecision(floatPrecision, intPrecision, fragment)
            );

            parseUniforms(gl, context, glProgram, uniforms);
            parseAttributes(gl, context, glProgram, attributes);

            this.needsCompile = false;

            return this;
        };

        var reName = /[^[]+/;

        function parseUniforms(gl, context, glProgram, hash) {
            var length = gl.getProgramParameter(glProgram, gl.ACTIVE_UNIFORMS),
                glValues = enums.glValues,
                i = -1,
                il = length - 1,
                uniform, name, array, Class, location, tmpName, j, jl;

            while (i++ < il) {
                uniform = gl.getActiveUniform(glProgram, i);

                if (uniform.size > 1) {
                    Class = uniforms[glValues[uniform.type]];
                    name = reName.exec(uniform.name)[0];
                    array = new Array(uniform.size);
                    array.name = name;
                    j = -1;
                    jl = array.length - 1;
                    while (j++ < jl) {
                        tmpName = name + "[" + j + "]";
                        location = gl.getUniformLocation(glProgram, tmpName);
                        array[j] = new Class(context, tmpName, location);
                    }
                    hash.add(array);
                } else {
                    name = uniform.name;
                    location = gl.getUniformLocation(glProgram, name);
                    hash.add(new uniforms[glValues[uniform.type]](context, name, location));
                }
            }
        }

        function parseAttributes(gl, context, glProgram, hash) {
            var length = gl.getProgramParameter(glProgram, gl.ACTIVE_ATTRIBUTES),
                glValues = enums.glValues,
                i = -1,
                il = length - 1,
                attribute, name, location;

            while (i++ < il) {
                attribute = gl.getActiveAttrib(glProgram, i);
                name = attribute.name;
                location = gl.getAttribLocation(glProgram, name);
                hash.add(new attributes[glValues[attribute.type]](context, name, location));
            }
        }

        function prependPrecision(floatPrecision, intPrecision, shader) {
            return "precision " + floatPrecision + " float;\nprecision " + intPrecision + " int;\n" + shader;
        }

        function createProgram(gl, vertex, fragment) {
            var program = gl.createProgram(),
                shader, i, il, programInfoLog;

            vertex = isArray(vertex) ? vertex : [vertex];
            fragment = isArray(fragment) ? fragment : [fragment];

            i = -1;
            il = vertex.length - 1;
            while (i++ < il) {
                shader = createShader(gl, vertex[i], gl.VERTEX_SHADER);
                gl.attachShader(program, shader);
                gl.deleteShader(shader);
            }

            i = -1;
            il = fragment.length - 1;
            while (i++ < il) {
                shader = createShader(gl, fragment[i], gl.FRAGMENT_SHADER);
                gl.attachShader(program, shader);
                gl.deleteShader(shader);
            }

            gl.linkProgram(program);
            gl.validateProgram(program);
            gl.useProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                programInfoLog = gl.getProgramInfoLog(program);
                gl.deleteProgram(program);
                throw new Error("createProgram: problem compiling Program " + programInfoLog);
            }

            return program;
        }

        function createShader(gl, source, type) {
            var shader = gl.createShader(type),
                shaderInfoLog;

            gl.shaderSource(shader, source);
            gl.compileShader(shader);

            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                shaderInfoLog = gl.getShaderInfoLog(shader);
                gl.deleteShader(shader);
                throw new Error("createShader: problem compiling shader " + shaderInfoLog);
            }

            return shader;
        }


    },
    function(require, exports, module, global) {

        var has = require(4),
            indexOf = require(44),
            forEach = require(45);


        module.exports = FastHash;


        function FastHash(key) {
            this.__key = key;
            this.__array = [];
            this.__hash = {};
        }

        FastHash.prototype.get = function(key) {
            return this.__hash[key];
        };

        FastHash.prototype.has = function(key) {
            return has(this.__hash, key);
        };

        FastHash.prototype.count = function() {
            return this.__array.length;
        };

        FastHash.prototype.clear = function() {
            var hash = this.__hash,
                key;

            for (key in hash) {
                if (has(hash, key)) {
                    delete hash[key];
                }
            }
            this.__array.length = 0;

            return this;
        };

        FastHash.prototype.add = function() {
            var i = -1,
                il = arguments.length - 1;

            while (i++ < il) {
                FastHash_add(this, arguments[i]);
            }

            return this;
        };

        function FastHash_add(_this, value) {
            var array = _this.__array,
                hash = _this.__hash,
                key = value[_this.__key];

            if (!has(hash, key)) {
                hash[key] = value;
                array[array.length] = value;
            }
        }

        FastHash.prototype.remove = function() {
            var i = -1,
                il = arguments.length - 1;

            while (i++ < il) {
                FastHash_remove(this, arguments[i]);
            }

            return this;
        };

        function FastHash_remove(_this, value) {
            var array = _this.__array,
                hash = _this.__hash,
                key = value[_this.__key];

            if (has(hash, key)) {
                delete hash[key];
                array.splice(indexOf(value), 1);
            }
        }

        FastHash.prototype.forEach = function(callback, thisArg) {
            return forEach(this.__array, callback, thisArg);
        };


    },
    function(require, exports, module, global) {

        var isArray = require(41);


        function arrayIndexOf(array, value, fromIndex) {
            var i = fromIndex - 1,
                il = array.length - 1;

            while (i++ < il) {
                if (array[i] === value) {
                    return i;
                }
            }

            return -1;
        }

        module.exports = function indexOf(array, value, fromIndex) {
            return isArray(array) ? arrayIndexOf(array, value, fromIndex || 0) : -1;
        };


    },
    function(require, exports, module, global) {

        var keys = require(3),
            isNullOrUndefined = require(20),
            fastBindThis = require(46),
            isObjectLike = require(30),
            isLength = require(29);


        function forEachArray(array, callback) {
            var i = -1,
                il = array.length - 1;

            while (i++ < il) {
                if (callback(array[i], i) === false) {
                    return false;
                }
            }

            return array;
        }

        function forEachObject(object, callback) {
            var objectKeys = keys(object),
                i = -1,
                il = objectKeys.length - 1,
                key;

            while (i++ < il) {
                key = objectKeys[i];

                if (callback(object[key], key) === false) {
                    return false;
                }
            }

            return object;
        }

        module.exports = function forEach(object, callback, thisArg) {
            callback = isNullOrUndefined(thisArg) ? callback : fastBindThis(callback, thisArg, 2);
            return (isObjectLike(object) && isLength(object.length)) ? forEachArray(object, callback) : forEachObject(object, callback);
        };


    },
    function(require, exports, module, global) {

        module.exports = function fastBindThis(callback, thisArg, length) {
            switch (length || callback.length) {
                case 0:
                    return function bound() {
                        return callback.call(thisArg);
                    };
                case 1:
                    return function bound(a1) {
                        return callback.call(thisArg, a1);
                    };
                case 2:
                    return function bound(a1, a2) {
                        return callback.call(thisArg, a1, a2);
                    };
                case 3:
                    return function bound(a1, a2, a3) {
                        return callback.call(thisArg, a1, a2, a3);
                    };
                case 4:
                    return function bound(a1, a2, a3, a4) {
                        return callback.call(thisArg, a1, a2, a3, a4);
                    };
                default:
                    return function bound() {
                        return callback.apply(thisArg, arguments);
                    };
            }
        };


    },
    function(require, exports, module, global) {

        module.exports = {
            BOOL: require(48),
            INT: require(50),
            FLOAT: require(51),

            BOOL_VEC2: require(52),
            BOOL_VEC3: require(54),
            BOOL_VEC4: require(55),

            INT_VEC2: require(52),
            INT_VEC3: require(54),
            INT_VEC4: require(55),

            FLOAT_VEC2: require(57),
            FLOAT_VEC3: require(58),
            FLOAT_VEC4: require(59),

            FLOAT_MAT2: require(60),
            FLOAT_MAT3: require(62),
            FLOAT_MAT4: require(64),

            SAMPLER_2D: require(65),
            SAMPLER_CUBE: require(66)
        };


    },
    function(require, exports, module, global) {

        var Uniform = require(49);


        module.exports = Uniform1b;


        function Uniform1b(context, name, location) {
            Uniform.call(this, context, name, location);
        }
        Uniform.extend(Uniform1b);

        Uniform1b.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || this.value !== value) {
                context.gl.uniform1i(this.location, value);
                this.value = value;
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var inherits = require(16);


        module.exports = Uniform;


        function Uniform(context, name, location) {
            this.name = name;
            this.location = location;
            this.context = context;
            this.value = null;
        }

        Uniform.extend = function(child) {
            return inherits(child, this);
        };

        Uniform.prototype.set = function( /* value, force */ ) {
            return this;
        };


    },
    function(require, exports, module, global) {

        var Uniform = require(49);


        module.exports = Uniform1i;


        function Uniform1i(context, name, location) {
            Uniform.call(this, context, name, location);
        }
        Uniform.extend(Uniform1i);

        Uniform1i.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || this.value !== value) {
                context.gl.uniform1i(this.location, value);
                this.value = value;
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var Uniform = require(49);


        module.exports = Uniform1f;


        function Uniform1f(context, name, location) {
            Uniform.call(this, context, name, location);
        }
        Uniform.extend(Uniform1f);

        Uniform1f.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || this.value !== value) {
                context.gl.uniform1f(this.location, value);
                this.value = value;
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var vec2 = require(53),
            Uniform = require(49);


        module.exports = Uniform2i;


        function Uniform2i(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = vec2.create(NaN, NaN);
        }
        Uniform.extend(Uniform2i);

        Uniform2i.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || vec2.notEqual(this.value, value)) {
                context.gl.uniform2i(this.location, value[0], value[1]);
                vec2.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var mathf = require(2);


        var vec2 = module.exports;


        vec2.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : mathf.ArrayType;


        vec2.create = function(x, y) {
            var out = new vec2.ArrayType(2);

            out[0] = x !== undefined ? x : 0;
            out[1] = y !== undefined ? y : 0;

            return out;
        };

        vec2.copy = function(out, a) {

            out[0] = a[0];
            out[1] = a[1];

            return out;
        };

        vec2.clone = function(a) {
            var out = new vec2.ArrayType(2);

            out[0] = a[0];
            out[1] = a[1];

            return out;
        };

        vec2.set = function(out, x, y) {

            out[0] = x !== undefined ? x : 0;
            out[1] = y !== undefined ? y : 0;

            return out;
        };

        vec2.add = function(out, a, b) {

            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];

            return out;
        };

        vec2.sub = function(out, a, b) {

            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];

            return out;
        };

        vec2.mul = function(out, a, b) {

            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];

            return out;
        };

        vec2.div = function(out, a, b) {
            var bx = b[0],
                by = b[1];

            out[0] = a[0] * (bx !== 0 ? 1 / bx : bx);
            out[1] = a[1] * (by !== 0 ? 1 / by : by);

            return out;
        };

        vec2.sadd = function(out, a, s) {

            out[0] = a[0] + s;
            out[1] = a[1] + s;

            return out;
        };

        vec2.ssub = function(out, a, s) {

            out[0] = a[0] - s;
            out[1] = a[1] - s;

            return out;
        };

        vec2.smul = function(out, a, s) {

            out[0] = a[0] * s;
            out[1] = a[1] * s;

            return out;
        };

        vec2.sdiv = function(out, a, s) {
            s = s !== 0 ? 1 / s : s;

            out[0] = a[0] * s;
            out[1] = a[1] * s;

            return out;
        };

        vec2.lengthSqValues = function(x, y) {

            return x * x + y * y;
        };

        vec2.lengthValues = function(x, y) {
            var lsq = vec2.lengthSqValues(x, y);

            return lsq !== 0 ? mathf.sqrt(lsq) : lsq;
        };

        vec2.invLengthValues = function(x, y) {
            var lsq = vec2.lengthSqValues(x, y);

            return lsq !== 0 ? 1 / mathf.sqrt(lsq) : lsq;
        };

        vec2.cross = function(a, b) {

            return a[0] * b[1] - a[1] * b[0];
        };

        vec2.dot = function(a, b) {

            return a[0] * b[0] + a[1] * b[1];
        };

        vec2.lengthSq = function(a) {

            return vec2.dot(a, a);
        };

        vec2.length = function(a) {
            var lsq = vec2.lengthSq(a);

            return lsq !== 0 ? mathf.sqrt(lsq) : lsq;
        };

        vec2.invLength = function(a) {
            var lsq = vec2.lengthSq(a);

            return lsq !== 0 ? 1 / mathf.sqrt(lsq) : lsq;
        };

        vec2.setLength = function(out, a, length) {
            var x = a[0],
                y = a[1],
                s = length * vec2.invLengthValues(x, y);

            out[0] = x * s;
            out[1] = y * s;

            return out;
        };

        vec2.normalize = function(out, a) {
            var x = a[0],
                y = a[1],
                invlsq = vec2.invLengthValues(x, y);

            out[0] = x * invlsq;
            out[1] = y * invlsq;

            return out;
        };

        vec2.inverse = function(out, a) {

            out[0] = a[0] * -1;
            out[1] = a[1] * -1;

            return out;
        };

        vec2.lerp = function(out, a, b, x) {
            var lerp = mathf.lerp;

            out[0] = lerp(a[0], b[0], x);
            out[1] = lerp(a[1], b[1], x);

            return out;
        };

        vec2.perp = function(out, a) {

            out[0] = a[1];
            out[1] = -a[0];

            return out;
        };

        vec2.perpR = function(out, a) {

            out[0] = -a[1];
            out[1] = a[0];

            return out;
        };

        vec2.min = function(out, a, b) {
            var ax = a[0],
                ay = a[1],
                bx = b[0],
                by = b[1];

            out[0] = bx < ax ? bx : ax;
            out[1] = by < ay ? by : ay;

            return out;
        };

        vec2.max = function(out, a, b) {
            var ax = a[0],
                ay = a[1],
                bx = b[0],
                by = b[1];

            out[0] = bx > ax ? bx : ax;
            out[1] = by > ay ? by : ay;

            return out;
        };

        vec2.clamp = function(out, a, min, max) {
            var x = a[0],
                y = a[1],
                minx = min[0],
                miny = min[1],
                maxx = max[0],
                maxy = max[1];

            out[0] = x < minx ? minx : x > maxx ? maxx : x;
            out[1] = y < miny ? miny : y > maxy ? maxy : y;

            return out;
        };

        vec2.transformAngle = function(out, a, angle) {
            var x = a[0],
                y = a[1],
                c = mathf.cos(angle),
                s = mathf.sin(angle);

            out[0] = x * c - y * s;
            out[1] = x * s + y * c;

            return out;
        };

        vec2.transformMat2 = function(out, a, m) {
            var x = a[0],
                y = a[1];

            out[0] = x * m[0] + y * m[2];
            out[1] = x * m[1] + y * m[3];

            return out;
        };

        vec2.transformMat32 = function(out, a, m) {
            var x = a[0],
                y = a[1];

            out[0] = x * m[0] + y * m[2] + m[4];
            out[1] = x * m[1] + y * m[3] + m[5];

            return out;
        };

        vec2.transformMat3 = function(out, a, m) {
            var x = a[0],
                y = a[1];

            out[0] = x * m[0] + y * m[3] + m[6];
            out[1] = x * m[1] + y * m[4] + m[7];

            return out;
        };

        vec2.transformMat4 = function(out, a, m) {
            var x = a[0],
                y = a[1];

            out[0] = x * m[0] + y * m[4] + m[12];
            out[1] = x * m[1] + y * m[5] + m[13];

            return out;
        };

        vec2.transformProjection = function(out, a, m) {
            var x = a[0],
                y = a[1],
                d = x * m[3] + y * m[7] + m[11] + m[15];

            d = d !== 0 ? 1 / d : d;

            out[0] = (x * m[0] + y * m[4] + m[12]) * d;
            out[1] = (x * m[1] + y * m[5] + m[13]) * d;

            return out;
        };

        vec2.positionFromMat32 = function(out, m) {

            out[0] = m[4];
            out[1] = m[5];

            return out;
        };

        vec2.positionFromMat4 = function(out, m) {

            out[0] = m[12];
            out[1] = m[13];

            return out;
        };

        vec2.scaleFromMat2 = function(out, m) {

            out[0] = vec2.lengthValues(m[0], m[2]);
            out[1] = vec2.lengthValues(m[1], m[3]);

            return out;
        };

        vec2.scaleFromMat32 = vec2.scaleFromMat2;

        vec2.scaleFromMat3 = function(out, m) {

            out[0] = vec2.lengthValues(m[0], m[3]);
            out[1] = vec2.lengthValues(m[1], m[4]);

            return out;
        };

        vec2.scaleFromMat4 = function(out, m) {

            out[0] = vec2.lengthValues(m[0], m[4]);
            out[1] = vec2.lengthValues(m[1], m[5]);

            return out;
        };

        vec2.equal = function(a, b) {
            return !(
                a[0] !== b[0] ||
                a[1] !== b[1]
            );
        };

        vec2.notEqual = function(a, b) {
            return (
                a[0] !== b[0] ||
                a[1] !== b[1]
            );
        };

        vec2.str = function(out) {

            return "Vec2(" + out[0] + ", " + out[1] + ")";
        };


    },
    function(require, exports, module, global) {

        var vec3 = require(8),
            Uniform = require(49);


        module.exports = Uniform3i;


        function Uniform3i(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = vec3.create(NaN, NaN, NaN);
        }
        Uniform.extend(Uniform3i);

        Uniform3i.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || vec3.notEqual(this.value, value)) {
                context.gl.uniform3i(this.location, value[0], value[1], value[2]);
                vec3.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var vec4 = require(56),
            Uniform = require(49);


        module.exports = Uniform4i;


        function Uniform4i(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = vec4.create(NaN, NaN, NaN, NaN);
        }
        Uniform.extend(Uniform4i);

        Uniform4i.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || vec4.notEqual(this.value, value)) {
                context.gl.uniform4i(this.location, value[0], value[1], value[2], value[3]);
                vec4.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var mathf = require(2);


        var vec4 = module.exports;


        vec4.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : mathf.ArrayType;


        vec4.create = function(x, y, z, w) {
            var out = new vec4.ArrayType(4);

            out[0] = x !== undefined ? x : 0;
            out[1] = y !== undefined ? y : 0;
            out[2] = z !== undefined ? z : 0;
            out[3] = w !== undefined ? w : 1;

            return out;
        };

        vec4.copy = function(out, a) {

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];

            return out;
        };

        vec4.clone = function(a) {
            var out = new vec4.ArrayType(4);

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];

            return out;
        };

        vec4.set = function(out, x, y, z, w) {

            out[0] = x !== undefined ? x : 0;
            out[1] = y !== undefined ? y : 0;
            out[2] = z !== undefined ? z : 0;
            out[3] = w !== undefined ? w : 0;

            return out;
        };

        vec4.add = function(out, a, b) {

            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];

            return out;
        };

        vec4.sub = function(out, a, b) {

            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];

            return out;
        };

        vec4.mul = function(out, a, b) {

            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            out[2] = a[2] * b[2];
            out[3] = a[3] * b[3];

            return out;
        };

        vec4.div = function(out, a, b) {
            var bx = b[0],
                by = b[1],
                bz = b[2],
                bw = b[3];

            out[0] = a[0] * (bx !== 0 ? 1 / bx : bx);
            out[1] = a[1] * (by !== 0 ? 1 / by : by);
            out[2] = a[2] * (bz !== 0 ? 1 / bz : bz);
            out[3] = a[3] * (bw !== 0 ? 1 / bw : bw);

            return out;
        };

        vec4.sadd = function(out, a, s) {

            out[0] = a[0] + s;
            out[1] = a[1] + s;
            out[2] = a[2] + s;
            out[3] = a[3] + s;

            return out;
        };

        vec4.ssub = function(out, a, s) {

            out[0] = a[0] - s;
            out[1] = a[1] - s;
            out[2] = a[2] - s;
            out[3] = a[3] - s;

            return out;
        };

        vec4.smul = function(out, a, s) {

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;
            out[3] = a[3] * s;

            return out;
        };

        vec4.sdiv = function(out, a, s) {
            s = s !== 0 ? 1 / s : s;

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;
            out[3] = a[3] * s;

            return out;
        };

        vec4.lengthSqValues = function(x, y, z, w) {

            return x * x + y * y + z * z + w * w;
        };

        vec4.lengthValues = function(x, y, z, w) {
            var lsq = vec4.lengthSqValues(x, y, z, w);

            return lsq !== 0 ? mathf.sqrt(lsq) : lsq;
        };

        vec4.invLengthValues = function(x, y, z, w) {
            var lsq = vec4.lengthSqValues(x, y, z, w);

            return lsq !== 0 ? 1 / mathf.sqrt(lsq) : lsq;
        };

        vec4.dot = function(a, b) {

            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
        };

        vec4.lengthSq = function(a) {

            return vec4.dot(a, a);
        };

        vec4.length = function(a) {
            var lsq = vec4.lengthSq(a);

            return lsq !== 0 ? mathf.sqrt(lsq) : lsq;
        };

        vec4.invLength = function(a) {
            var lsq = vec4.lengthSq(a);

            return lsq !== 0 ? 1 / mathf.sqrt(lsq) : lsq;
        };

        vec4.setLength = function(out, a, length) {
            var x = a[0],
                y = a[1],
                z = a[2],
                w = a[3],
                s = length * vec4.invLengthValues(x, y, z, w);

            out[0] = x * s;
            out[1] = y * s;
            out[2] = z * s;
            out[3] = w * s;

            return out;
        };

        vec4.normalize = function(out, a) {
            var x = a[0],
                y = a[1],
                z = a[2],
                w = a[3],
                lsq = vec4.invLengthValues(x, y, z, w);

            out[0] = x * lsq;
            out[1] = y * lsq;
            out[2] = z * lsq;
            out[3] = w * lsq;

            return out;
        };

        vec4.inverse = function(out, a) {

            out[0] = a[0] * -1;
            out[1] = a[1] * -1;
            out[2] = a[2] * -1;
            out[3] = a[3] * -1;

            return out;
        };

        vec4.lerp = function(out, a, b, x) {
            var lerp = mathf.lerp;

            out[0] = lerp(a[0], b[0], x);
            out[1] = lerp(a[1], b[1], x);
            out[2] = lerp(a[2], b[2], x);
            out[3] = lerp(a[3], b[3], x);

            return out;
        };

        vec4.min = function(out, a, b) {
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3],
                bx = b[0],
                by = b[1],
                bz = b[2],
                bw = b[3];

            out[0] = bx < ax ? bx : ax;
            out[1] = by < ay ? by : ay;
            out[2] = bz < az ? bz : az;
            out[3] = bw < aw ? bw : aw;

            return out;
        };

        vec4.max = function(out, a, b) {
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3],
                bx = b[0],
                by = b[1],
                bz = b[2],
                bw = b[3];

            out[0] = bx > ax ? bx : ax;
            out[1] = by > ay ? by : ay;
            out[2] = bz > az ? bz : az;
            out[3] = bw > aw ? bw : aw;

            return out;
        };

        vec4.clamp = function(out, a, min, max) {
            var x = a[0],
                y = a[1],
                z = a[2],
                w = a[3],
                minx = min[0],
                miny = min[1],
                minz = min[2],
                minw = min[3],
                maxx = max[0],
                maxy = max[1],
                maxz = max[2],
                maxw = max[3];

            out[0] = x < minx ? minx : x > maxx ? maxx : x;
            out[1] = y < miny ? miny : y > maxy ? maxy : y;
            out[2] = z < minz ? minz : z > maxz ? maxz : z;
            out[3] = w < minw ? minw : w > maxw ? maxw : w;

            return out;
        };

        vec4.transformMat4 = function(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2],
                w = a[3];

            out[0] = x * m[0] + y * m[4] + z * m[8] + w * m[12];
            out[1] = x * m[1] + y * m[5] + z * m[9] + w * m[13];
            out[2] = x * m[2] + y * m[6] + z * m[10] + w * m[14];
            out[3] = x * m[3] + y * m[7] + z * m[11] + w * m[15];

            return out;
        };

        vec4.transformProjection = function(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2],
                w = a[3],
                d = x * m[3] + y * m[7] + z * m[11] + w * m[15];

            d = d !== 0 ? 1 / d : d;

            out[0] = (x * m[0] + y * m[4] + z * m[8] + w * m[12]) * d;
            out[1] = (x * m[1] + y * m[5] + z * m[9] + w * m[13]) * d;
            out[2] = (x * m[2] + y * m[6] + z * m[10] + w * m[14]) * d;
            out[3] = (x * m[3] + y * m[7] + z * m[11] + w * m[15]) * d;

            return out;
        };

        vec4.positionFromMat4 = function(out, m) {

            out[0] = m[12];
            out[1] = m[13];
            out[2] = m[14];
            out[3] = m[15];

            return out;
        };

        vec4.scaleFromMat4 = function(out, m) {

            out[0] = vec4.lengthValues(m[0], m[4], m[8], m[12]);
            out[1] = vec4.lengthValues(m[1], m[5], m[9], m[13]);
            out[2] = vec4.lengthValues(m[2], m[6], m[10], m[14]);
            out[3] = vec4.lengthValues(m[3], m[7], m[11], m[15]);

            return out;
        };

        vec4.equal = function(a, b) {
            return !(
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2] ||
                a[3] !== b[3]
            );
        };

        vec4.notEqual = function(a, b) {
            return (
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2] ||
                a[3] !== b[3]
            );
        };

        vec4.str = function(out) {

            return "Vec4(" + out[0] + ", " + out[1] + ", " + out[2] + ", " + out[3] + ")";
        };


    },
    function(require, exports, module, global) {

        var vec2 = require(53),
            Uniform = require(49);


        module.exports = Uniform2f;


        function Uniform2f(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = vec2.create(NaN, NaN);
        }
        Uniform.extend(Uniform2f);

        Uniform2f.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || vec2.notEqual(this.value, value)) {
                context.gl.uniform2f(this.location, value[0], value[1]);
                vec2.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var vec3 = require(8),
            Uniform = require(49);


        module.exports = Uniform3f;


        function Uniform3f(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = vec3.create(NaN, NaN, NaN);
        }
        Uniform.extend(Uniform3f);

        Uniform3f.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || vec3.notEqual(this.value, value)) {
                context.gl.uniform3f(this.location, value[0], value[1], value[2]);
                vec3.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var vec4 = require(56),
            Uniform = require(49);


        module.exports = Uniform4f;


        function Uniform4f(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = vec4.create(NaN, NaN, NaN, NaN);
        }
        Uniform.extend(Uniform4f);

        Uniform4f.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || vec4.notEqual(this.value, value)) {
                context.gl.uniform4f(this.location, value[0], value[1], value[2], value[3]);
                vec4.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var mat2 = require(61),
            Uniform = require(49);


        module.exports = UniformMatrix2fv;


        function UniformMatrix2fv(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = mat2.create(NaN, NaN, NaN, NaN);
        }
        Uniform.extend(UniformMatrix2fv);

        UniformMatrix2fv.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || mat2.notEqual(this.value, value)) {
                context.gl.uniformMatrix2fv(this.location, false, value);
                mat2.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var mathf = require(2);


        var mat2 = module.exports;


        mat2.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : mathf.ArrayType;


        mat2.create = function(m11, m12, m21, m22) {
            var out = new mat2.ArrayType(4);

            out[0] = m11 !== undefined ? m11 : 1;
            out[2] = m12 !== undefined ? m12 : 0;
            out[1] = m21 !== undefined ? m21 : 0;
            out[3] = m22 !== undefined ? m22 : 1;

            return out;
        };

        mat2.copy = function(out, a) {

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];

            return out;
        };

        mat2.clone = function(a) {
            var out = new mat2.ArrayType(4);

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];

            return out;
        };

        mat2.set = function(out, m11, m12, m21, m22) {

            out[0] = m11 !== undefined ? m11 : 1;
            out[2] = m12 !== undefined ? m12 : 0;
            out[1] = m21 !== undefined ? m21 : 0;
            out[3] = m22 !== undefined ? m22 : 1;

            return out;
        };

        mat2.identity = function(out) {

            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;

            return out;
        };

        mat2.zero = function(out) {

            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;

            return out;
        };

        mat2.mul = function(out, a, b) {
            var a11 = a[0],
                a12 = a[2],
                a21 = a[1],
                a22 = a[3],

                b11 = b[0],
                b12 = b[2],
                b21 = b[1],
                b22 = b[3];

            out[0] = a11 * b11 + a21 * b12;
            out[1] = a12 * b11 + a22 * b12;

            out[2] = a11 * b21 + a21 * b22;
            out[3] = a12 * b21 + a22 * b22;

            return out;
        };

        mat2.smul = function(out, a, s) {

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;
            out[3] = a[3] * s;

            return out;
        };

        mat2.sdiv = function(out, a, s) {
            s = s !== 0 ? 1 / s : s;

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;
            out[3] = a[3] * s;

            return out;
        };

        mat2.determinant = function(a) {

            return a[0] * a[3] - a[2] * a[1];
        };

        mat2.inverse = function(out, a) {
            var m11 = a[0],
                m12 = a[2],
                m21 = a[1],
                m22 = a[3],

                det = m11 * m22 - m12 * m21;

            if (det === 0) {
                return mat2.identity(out);
            }
            det = 1 / det;

            out[0] = m22 * det;
            out[1] = -m12 * det;
            out[2] = -m21 * det;
            out[3] = m11 * det;

            return out;
        };

        mat2.transpose = function(out, a) {
            var tmp;

            if (out === a) {
                tmp = a[1];
                out[1] = a[2];
                out[2] = tmp;
            } else {
                out[0] = a[0];
                out[1] = a[2];
                out[2] = a[1];
                out[3] = a[3];
            }

            return out;
        };

        mat2.setRotation = function(out, angle) {
            var c = mathf.cos(angle),
                s = mathf.sin(angle);

            out[0] = c;
            out[1] = s;
            out[2] = -s;
            out[3] = c;

            return out;
        };

        mat2.getRotation = function(out) {

            return mathf.atan2(out[1], out[0]);
        };

        mat2.rotate = function(out, a, angle) {
            var m11 = a[0],
                m12 = a[2],
                m21 = a[1],
                m22 = a[3],

                s = mathf.sin(angle),
                c = mathf.sin(angle);

            out[0] = m11 * c + m12 * s;
            out[1] = m11 * -s + m12 * c;
            out[2] = m21 * c + m22 * s;
            out[3] = m21 * -s + m22 * c;

            return out;
        };

        mat2.equal = function(a, b) {
            return !(
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2] ||
                a[3] !== b[3]
            );
        };

        mat2.notEqual = function(a, b) {
            return (
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2] ||
                a[3] !== b[3]
            );
        };

        mat2.str = function(out) {
            return (
                "Mat2[" + out[0] + ", " + out[2] + "]\n" +
                "     [" + out[1] + ", " + out[3] + "]"
            );
        };


    },
    function(require, exports, module, global) {

        var mat3 = require(63),
            Uniform = require(49);


        module.exports = UniformMatrix3fv;


        function UniformMatrix3fv(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = mat3.create(
                NaN, NaN, NaN,
                NaN, NaN, NaN,
                NaN, NaN, NaN
            );
        }
        Uniform.extend(UniformMatrix3fv);

        UniformMatrix3fv.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || mat3.notEqual(this.value, value)) {
                context.gl.uniformMatrix3fv(this.location, false, value);
                mat3.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var mathf = require(2);


        var mat3 = module.exports;


        mat3.create = function(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
            var out = new mathf.ArrayType(9);

            out[0] = m11 !== undefined ? m11 : 1;
            out[1] = m21 !== undefined ? m21 : 0;
            out[2] = m31 !== undefined ? m31 : 0;
            out[3] = m12 !== undefined ? m12 : 0;
            out[4] = m22 !== undefined ? m22 : 1;
            out[5] = m32 !== undefined ? m32 : 0;
            out[6] = m13 !== undefined ? m13 : 0;
            out[7] = m23 !== undefined ? m23 : 0;
            out[8] = m33 !== undefined ? m33 : 1;

            return out;
        };

        mat3.copy = function(out, a) {

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];

            return out;
        };

        mat3.clone = function(a) {
            var out = new mathf.ArrayType(9);

            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];

            return out;
        };

        mat3.set = function(out, m11, m12, m13, m21, m22, m23, m31, m32, m33) {

            out[0] = m11 !== undefined ? m11 : 1;
            out[1] = m21 !== undefined ? m21 : 0;
            out[2] = m31 !== undefined ? m31 : 0;
            out[3] = m12 !== undefined ? m12 : 0;
            out[4] = m22 !== undefined ? m22 : 1;
            out[5] = m32 !== undefined ? m32 : 0;
            out[6] = m13 !== undefined ? m13 : 0;
            out[7] = m23 !== undefined ? m23 : 0;
            out[8] = m33 !== undefined ? m33 : 1;

            return out;
        };

        mat3.identity = function(out) {

            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 1;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;

            return out;
        };

        mat3.zero = function(out) {

            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;

            return out;
        };

        mat3.mul = function(out, a, b) {
            var a11 = a[0],
                a12 = a[3],
                a13 = a[6],
                a21 = a[1],
                a22 = a[4],
                a23 = a[7],
                a31 = a[2],
                a32 = a[5],
                a33 = a[8],

                b11 = b[0],
                b12 = b[3],
                b13 = b[6],
                b21 = b[1],
                b22 = b[4],
                b23 = b[7],
                b31 = b[2],
                b32 = b[5],
                b33 = b[8];

            out[0] = a11 * b11 + a21 * b12 + a31 * b13;
            out[3] = a12 * b11 + a22 * b12 + a32 * b13;
            out[6] = a13 * b11 + a23 * b12 + a33 * b13;

            out[1] = a11 * b21 + a21 * b22 + a31 * b23;
            out[4] = a12 * b21 + a22 * b22 + a32 * b23;
            out[7] = a13 * b21 + a23 * b22 + a33 * b23;

            out[2] = a11 * b31 + a21 * b32 + a31 * b33;
            out[5] = a12 * b31 + a22 * b32 + a32 * b33;
            out[8] = a13 * b31 + a23 * b32 + a33 * b33;

            return out;
        };

        mat3.smul = function(out, a, s) {

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;
            out[3] = a[3] * s;
            out[4] = a[4] * s;
            out[5] = a[5] * s;
            out[6] = a[6] * s;
            out[7] = a[7] * s;
            out[8] = a[8] * s;

            return out;
        };

        mat3.sdiv = function(out, a, s) {
            s = s !== 0 ? 1 / s : s;

            out[0] = a[0] * s;
            out[1] = a[1] * s;
            out[2] = a[2] * s;
            out[3] = a[3] * s;
            out[4] = a[4] * s;
            out[5] = a[5] * s;
            out[6] = a[6] * s;
            out[7] = a[7] * s;
            out[8] = a[8] * s;

            return out;
        };

        mat3.determinant = function(out) {
            var a = out[0],
                b = out[1],
                c = out[2],
                d = out[3],
                e = out[4],
                f = out[5],
                g = out[6],
                h = out[7],
                i = out[8];

            return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
        };

        mat3.inverseMat = function(out, m11, m12, m13, m21, m22, m23, m31, m32, m33) {
            var m0 = m22 * m33 - m23 * m32,
                m3 = m13 * m32 - m12 * m33,
                m6 = m12 * m23 - m13 * m22,

                det = m11 * m0 + m21 * m3 + m31 * m6;

            if (det === 0) {
                return mat3.identity(out);
            }
            det = 1 / det;

            out[0] = m0 * det;
            out[1] = (m23 * m31 - m21 * m33) * det;
            out[2] = (m21 * m32 - m22 * m31) * det;

            out[3] = m3 * det;
            out[4] = (m11 * m33 - m13 * m31) * det;
            out[5] = (m12 * m31 - m11 * m32) * det;

            out[6] = m6 * det;
            out[7] = (m13 * m21 - m11 * m23) * det;
            out[8] = (m11 * m22 - m12 * m21) * det;

            return out;
        };

        mat3.inverse = function(out, a) {
            return mat3.inverseMat(
                out,
                a[0], a[3], a[6],
                a[1], a[4], a[7],
                a[2], a[5], a[8]
            );
        };

        mat3.inverseMat4 = function(out, a) {
            return mat3.inverseMat(
                out,
                a[0], a[4], a[8],
                a[1], a[5], a[9],
                a[2], a[6], a[10]
            );
        };

        mat3.transpose = function(out, a) {
            var a01, a02, a12;

            if (out === a) {
                a01 = a[1];
                a02 = a[2];
                a12 = a[5];
                out[1] = a[3];
                out[2] = a[6];
                out[3] = a01;
                out[5] = a[7];
                out[6] = a02;
                out[7] = a12;
            } else {
                out[0] = a[0];
                out[1] = a[3];
                out[2] = a[6];
                out[3] = a[1];
                out[4] = a[4];
                out[5] = a[7];
                out[6] = a[2];
                out[7] = a[5];
                out[8] = a[8];
            }

            return out;
        };

        mat3.scale = function(out, a, v) {
            var x = v[0],
                y = v[1],
                z = v[2];

            out[0] *= x;
            out[3] *= y;
            out[6] *= z;
            out[1] *= x;
            out[4] *= y;
            out[7] *= z;
            out[2] *= x;
            out[5] *= y;
            out[8] *= z;

            return out;
        };

        mat3.makeScale = function(out, v) {

            return mat3.set(
                out,
                v[0], 0, 0,
                0, v[1], 0,
                0, 0, v[2]
            );
        };

        mat3.makeRotationX = function(out, angle) {
            var c = mathf.cos(angle),
                s = mathf.sin(angle);

            return mat3.set(
                out,
                1, 0, 0,
                0, c, -s,
                0, s, c
            );
        };

        mat3.makeRotationY = function(out, angle) {
            var c = mathf.cos(angle),
                s = mathf.sin(angle);

            return mat3.set(
                out,
                c, 0, s,
                0, 1, 0, -s, 0, c
            );
        };

        mat3.makeRotationZ = function(out, angle) {
            var c = mathf.cos(angle),
                s = mathf.sin(angle);

            return mat3.set(
                out,
                c, -s, 0,
                s, c, 0,
                0, 0, 1
            );
        };

        mat3.fromQuat = function(out, q) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3],
                x2 = x + x,
                y2 = y + y,
                z2 = z + z,
                xx = x * x2,
                xy = x * y2,
                xz = x * z2,
                yy = y * y2,
                yz = y * z2,
                zz = z * z2,
                wx = w * x2,
                wy = w * y2,
                wz = w * z2;

            out[0] = 1 - (yy + zz);
            out[1] = xy + wz;
            out[2] = xz - wy;

            out[3] = xy - wz;
            out[4] = 1 - (xx + zz);
            out[5] = yz + wx;

            out[6] = xz + wy;
            out[7] = yz - wx;
            out[8] = 1 - (xx + yy);

            return out;
        };

        mat3.equal = function(a, b) {
            return !(
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2] ||
                a[3] !== b[3] ||
                a[4] !== b[4] ||
                a[5] !== b[5] ||
                a[6] !== b[6] ||
                a[7] !== b[7] ||
                a[8] !== b[8]
            );
        };

        mat3.notEqual = function(a, b) {
            return (
                a[0] !== b[0] ||
                a[1] !== b[1] ||
                a[2] !== b[2] ||
                a[3] !== b[3] ||
                a[4] !== b[4] ||
                a[5] !== b[5] ||
                a[6] !== b[6] ||
                a[7] !== b[7] ||
                a[8] !== b[8]
            );
        };

        mat3.str = function(out) {
            return (
                "Mat3[" + out[0] + ", " + out[3] + ", " + out[6] + "]\n" +
                "     [" + out[1] + ", " + out[4] + ", " + out[7] + "]\n" +
                "     [" + out[2] + ", " + out[5] + ", " + out[8] + "]"
            );
        };


    },
    function(require, exports, module, global) {

        var mat4 = require(1),
            Uniform = require(49);


        module.exports = UniformMatrix4fv;


        function UniformMatrix4fv(context, name, location) {
            Uniform.call(this, context, name, location);
            this.value = mat4.create(
                NaN, NaN, NaN, NaN,
                NaN, NaN, NaN, NaN,
                NaN, NaN, NaN, NaN,
                NaN, NaN, NaN, NaN
            );
        }
        Uniform.extend(UniformMatrix4fv);

        UniformMatrix4fv.prototype.set = function(value, force) {
            var context = this.context;

            if (force || context.__programForce || mat4.notEqual(this.value, value)) {
                context.gl.uniformMatrix4fv(this.location, false, value);
                mat4.copy(this.value, value);
            }

            return this;
        };


    },
    function(require, exports, module, global) {

        var Uniform = require(49);


        module.exports = UniformTexture;


        function UniformTexture(context, name, location) {
            Uniform.call(this, context, name, location);
        }
        Uniform.extend(UniformTexture);

        UniformTexture.prototype.set = function(value, force) {
            this.context.setTexture(this.location, value, force);
            return this;
        };


    },
    function(require, exports, module, global) {

        var Uniform = require(49);


        module.exports = UniformTextureCube;


        function UniformTextureCube(context, name, location) {
            Uniform.call(this, context, name, location);
        }
        Uniform.extend(UniformTextureCube);

        UniformTextureCube.prototype.set = function(value, force) {
            this.context.setTexture(this.location, value, force);
            return this;
        };


    },
    function(require, exports, module, global) {

        module.exports = {
            INT: require(68),
            FLOAT: require(70),

            INT_VEC2: require(71),
            INT_VEC3: require(72),
            INT_VEC4: require(73),

            FLOAT_VEC2: require(74),
            FLOAT_VEC3: require(75),
            FLOAT_VEC4: require(76)
        };


    },
    function(require, exports, module, global) {

        var Attribute = require(69);


        module.exports = Attribute1i;


        function Attribute1i(context, name, location) {
            Attribute.call(this, context, name, location);
        }
        Attribute.extend(Attribute1i);

        Attribute1i.prototype.set = function(buffer, offset) {
            var context = this.context,
                gl = context.gl;

            context.setAttribPointer(this.location, 1, gl.FLOAT, buffer.stride, offset, context.setArrayBuffer(buffer));
            return this;
        };


    },
    function(require, exports, module, global) {

        var inherits = require(16);


        module.exports = Attribute;


        function Attribute(context, name, location) {
            this.name = name;
            this.location = location;
            this.context = context;
        }

        Attribute.extend = function(child) {
            return inherits(child, this);
        };

        Attribute.prototype.set = function( /* value, force */ ) {
            return this;
        };


    },
    function(require, exports, module, global) {

        var Attribute = require(69);


        module.exports = Attribute1f;


        function Attribute1f(context, name, location) {
            Attribute.call(this, context, name, location);
        }
        Attribute.extend(Attribute1f);

        Attribute1f.prototype.set = function(buffer, offset) {
            var context = this.context,
                gl = context.gl;

            context.setAttribPointer(this.location, 1, gl.FLOAT, buffer.stride, offset, context.setArrayBuffer(buffer));
            return this;
        };


    },
    function(require, exports, module, global) {

        var Attribute = require(69);


        module.exports = Attribute2i;


        function Attribute2i(context, name, location) {
            Attribute.call(this, context, name, location);
        }
        Attribute.extend(Attribute2i);

        Attribute2i.prototype.set = function(buffer, offset) {
            var context = this.context,
                gl = context.gl;

            context.setAttribPointer(this.location, 2, gl.FLOAT, buffer.stride, offset, context.setArrayBuffer(buffer));
            return this;
        };


    },
    function(require, exports, module, global) {

        var Attribute = require(69);


        module.exports = Attribute3i;


        function Attribute3i(context, name, location) {
            Attribute.call(this, context, name, location);
        }
        Attribute.extend(Attribute3i);

        Attribute3i.prototype.set = function(buffer, offset) {
            var context = this.context,
                gl = context.gl;

            context.setAttribPointer(this.location, 3, gl.FLOAT, buffer.stride, offset, context.setArrayBuffer(buffer));
            return this;
        };


    },
    function(require, exports, module, global) {

        var Attribute = require(69);


        module.exports = Attribute4i;


        function Attribute4i(context, name, location) {
            Attribute.call(this, context, name, location);
        }
        Attribute.extend(Attribute4i);

        Attribute4i.prototype.set = function(buffer, offset) {
            var context = this.context,
                gl = context.gl;

            context.setAttribPointer(this.location, 4, gl.FLOAT, buffer.stride, offset, context.setArrayBuffer(buffer));
            return this;
        };


    },
    function(require, exports, module, global) {

        var Attribute = require(69);


        module.exports = Attribute2f;


        function Attribute2f(context, name, location) {
            Attribute.call(this, context, name, location);
        }
        Attribute.extend(Attribute2f);

        Attribute2f.prototype.set = function(buffer, offset) {
            var context = this.context,
                gl = context.gl;

            context.setAttribPointer(this.location, 2, gl.FLOAT, buffer.stride, offset, context.setArrayBuffer(buffer));
            return this;
        };


    },
    function(require, exports, module, global) {

        var Attribute = require(69);


        module.exports = Attribute3f;


        function Attribute3f(context, name, location) {
            Attribute.call(this, context, name, location);
        }
        Attribute.extend(Attribute3f);

        Attribute3f.prototype.set = function(buffer, offset) {
            var context = this.context,
                gl = context.gl;

            context.setAttribPointer(this.location, 3, gl.FLOAT, buffer.stride, offset, context.setArrayBuffer(buffer));
            return this;
        };


    },
    function(require, exports, module, global) {

        var Attribute = require(69);


        module.exports = Attribute4f;


        function Attribute4f(context, name, location) {
            Attribute.call(this, context, name, location);
        }
        Attribute.extend(Attribute4f);

        Attribute4f.prototype.set = function(buffer, offset) {
            var context = this.context,
                gl = context.gl;

            context.setAttribPointer(this.location, 4, gl.FLOAT, buffer.stride, offset, context.setArrayBuffer(buffer));
            return this;
        };


    }
], (new Function("return this;"))()));
